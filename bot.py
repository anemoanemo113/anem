from telegram import Update, InputMediaPhoto, ReplyKeyboardRemove, InputMediaDocument, InputMediaVideo, InlineKeyboardButton, InlineKeyboardMarkup, Message, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, ConversationHandler, CallbackQueryHandler
from PIL import Image
from telegram.constants import ParseMode
from tenacity import retry, wait_fixed, stop_after_attempt
from background import keep_alive
import asyncio
import requests
import logging
import os
import shutil
import io
import aiohttp
from tenacity import retry, wait_fixed, stop_after_attempt, RetryError
import tempfile
import re
from requests.exceptions import Timeout
from bs4 import BeautifulSoup
import wikipediaapi
import wikipedia
import gpt_helper
from gpt_helper import add_to_context, generate_gemini_response, limit_response_length, user_contexts, save_context_to_firebase, load_context_from_firebase, get_clean_response_text, set_user_role, generate_plant_issue_response, generate_text_rec_response, generate_plant_help_response, set_user_presets, get_user_preset, get_user_model, set_user_model
from collections import deque
from aiohttp import ClientSession, ClientTimeout, FormData
import chardet
import json
import os
from gpt_helper import user_roles
import base64

# –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ —Ç–æ–∫–µ–Ω—ã –∏ –∫–ª—é—á –¥–ª—è imgbb
TELEGRAM_BOT_TOKEN = '7538468672:AAEOEFS7V0z0uDzZkeGNQKYsDGlzdOziAZI'
TELEGRAPH_TOKEN = 'c244b32be4b76eb082d690914944da14238249bbdd55f6ffd349b9e000c1'
IMGBB_API_KEY = '25c8af109577638da9ba88a667be22b1'
GROUP_CHAT_ID = -1002233281756

# –°–æ—Å—Ç–æ—è–Ω–∏—è
# –°–æ—Å—Ç–æ—è–Ω–∏—è
ASKING_FOR_ARTIST_LINK, ASKING_FOR_AUTHOR_NAME, ASKING_FOR_IMAGE, EDITING_FRAGMENT, ASKING_FOR_FILE, ASKING_FOR_OCR, RUNNING_GPT_MODE, ASKING_FOR_ROLE, ASKING_FOR_FOLLOWUP = range(9)
# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}
publish_data = {}
users_in_send_mode = set()
media_group_storage = {}
is_search_mode = {}
is_ocr_mode = {}
is_gpt_mode = {}
is_role_mode = {}
is_asking_mode = {}
user_presets = {} 
user_models = {}
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

async def start(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id if update.message else update.callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∞–Ω–Ω—ã—Ö
    if update.message:
        message_to_reply = update.message
        user_id = update.message.from_user.id
    elif update.callback_query:
        message_to_reply = update.callback_query.message
        user_id = update.callback_query.from_user.id
    else:
        return ConversationHandler.END  # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –¥–∞–Ω–Ω—ã—Ö
    if user_id not in user_data:
        logger.info(f"User {user_id} started the process.")
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"
        keyboard = [
            [InlineKeyboardButton("üé® –ù–∞–π—Ç–∏ –∞–≤—Ç–æ—Ä–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –ò–ò üé®", callback_data='start_search')],
            [InlineKeyboardButton("üå± –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å (–†–∞—Å—Ç–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç) üå±", callback_data='start_ocr')],            
            [InlineKeyboardButton("ü¶ä –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –±–æ—Ç–æ–º ü¶ä", callback_data='run_gpt')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        await message_to_reply.reply_text(
            'üå†–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã Anemone. –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–æ—Å—Ç –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤–∞–º, —Ç–∞–∫ —á—Ç–æ –Ω–µ –±–æ–π—Ç–µ—Å—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –ø–æ–ª—É—á–∏—Ç—Å—è\n\n'
            '–î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ—Ä–∞. –ï—Å–ª–∏ —É –≤–∞—Å –µ—ë –Ω–µ—Ç, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç\n\n'
            '<i>–¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ—Ä–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é, –Ω–∞–π—Ç–∏ —Å–µ—Ä–∏—é –∏ —Ç–∞–π–º–º–µ—Ç–∫—É –∞–Ω–∏–º–µ –ø–æ –∫–∞–¥—Ä—É –∏–∑ –Ω–µ–≥–æ, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ò–ò –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ. –ª–∏–±–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –±–æ—Ç–æ–º</i>\n\n',
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

        user_data[user_id] = {'status': 'awaiting_artist_link'}
        return ASKING_FOR_ARTIST_LINK

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –±–æ—Ç –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞
    if is_search_mode.get(user_id, False):
        if update.message.photo:
            file = await update.message.photo[-1].get_file()
            image_path = 'temp_image.jpg'
        elif update.message.document and update.message.document.mime_type.startswith('image/'):
            file = await update.message.document.get_file()
            image_path = 'temp_image.jpg'
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
            return ASKING_FOR_FILE

        await file.download_to_drive(image_path)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞
        loading_message = await update.message.reply_text("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥...")

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ Catbox
        img_url = await upload_catbox(image_path)
        context.user_data['img_url'] = img_url 

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏
        await loading_message.edit_text("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç SauceNAO...–æ–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 5 —Å–µ–∫—É–Ω–¥")

        # –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –ø–æ–∏—Å–∫–∞
        search_url = f"https://saucenao.com/search.php?db=999&url={img_url}"
        yandex_search_url = f"https://yandex.ru/images/search?source=collections&rpt=imageview&url={img_url}"
        google_search_url = f"https://lens.google.com/uploadbyurl?url={img_url}"
        bing_search_url = f"https://www.bing.com/images/search?view=detailv2&iss=sbi&form=SBIVSP&sbisrc=UrlPaste&q=imgurl:{img_url}"

        keyboard = [
            [InlineKeyboardButton("–ê–ò –∏–ª–∏ –Ω–µ—Ç?", callback_data='ai_or_not')],
            [InlineKeyboardButton("–í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ SauceNAO", url=search_url)],
            [InlineKeyboardButton("–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Yandex Images", url=yandex_search_url)],
            [InlineKeyboardButton("–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Google Images", url=google_search_url)],
            [InlineKeyboardButton("–ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Bing Images", url=bing_search_url)],
            [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–∏—Å–∫", callback_data='finish_search')],
            [InlineKeyboardButton("‚ÄºÔ∏è–ü–æ–ª–Ω—ã–π –°–±—Ä–æ—Å –ë–æ—Ç–∞‚ÄºÔ∏è", callback_data='restart')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)        

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ—Ä–æ–≤ –∏ —Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ SauceNAO
            authors_text, external_links, jp_name, details_text, ep_name, ep_time, dA_id, full_author_text, pixiv_id, twitter_id = await search_image_saucenao(image_path)
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
            if str(e) == "–õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω":
                await loading_message.edit_text("–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ SauceNAO —É –±–æ—Ç–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω. –í—Å–µ–≥–æ –∏—Ö 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ –≤ —Å—É—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä—É —á–∞—Å–æ–≤, –ª–∏–±–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ —á—Ç–æ–±—ã –ø–æ–∏—Å–∫–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ.", reply_markup=reply_markup)
            else:
                await loading_message.edit_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ SauceNAO: {str(e)}", reply_markup=reply_markup)
            os.remove(image_path)
            return ASKING_FOR_FILE

        os.remove(image_path)

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Å—ã–ª–æ–∫ –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —á—Ç–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–µ
        links_text = "\n".join(f"{i + 1}. {link}" for i, link in enumerate(external_links)) if isinstance(external_links, list) else None
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        reply_text = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n"
        if authors_text:
            reply_text += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {authors_text}\n"
        if details_text:
            reply_text += f"–î–µ—Ç–∞–ª–∏: {details_text}\n\n"
        if jp_name:
            reply_text += f"JP –ù–∞–∑–≤–∞–Ω–∏–µ: {jp_name}\n"
        if ep_name:
            reply_text += f"{ep_name}\n"
        if dA_id:
            reply_text += f"dA ID: {dA_id}\n"
        if twitter_id:
            reply_text += f"–¢–≤–∏—Ç—Ç–µ—Ä:\n{twitter_id}"               
        if pixiv_id:
            reply_text += f"Pixiv: {pixiv_id}\n"
        if full_author_text:
            reply_text += f"–ê–≤—Ç–æ—Ä: {full_author_text}\n"
        if ep_time:
            reply_text += f"{ep_time}\n\n"
        if links_text:
            reply_text += f"–°—Å—ã–ª–∫–∏:\n{links_text}"



        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        if not authors_text and not links_text:
            reply_text = (
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. "
                "–í–æ–∑–º–æ–∂–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ, –≤–æ–∑–º–æ–∂–Ω–æ –∞–≤—Ç–æ—Ä –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–µ–Ω –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å–≤–µ–∂–µ–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –ø–æ–∏—Å–∫"
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await loading_message.edit_text(reply_text.strip(), reply_markup=reply_markup)

        return ASKING_FOR_FILE



    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –±–æ—Ç –≤ —Ä–µ–∂–∏–º–µ ocr
    if is_ocr_mode.get(user_id, False):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç
        if update.message.photo:
            file = await update.message.photo[-1].get_file()
            image_path = 'temp_image.jpg'
        elif update.message.document and update.message.document.mime_type.startswith('image/'):
            file = await update.message.document.get_file()
            image_path = 'temp_image.jpg'
        else:
            keyboard = [
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è", callback_data='finish_ocr')],
                [InlineKeyboardButton("‚ÄºÔ∏è–ü–æ–ª–Ω—ã–π –°–±—Ä–æ—Å –ë–æ—Ç–∞‚ÄºÔ∏è", callback_data='restart')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è",
                reply_markup=reply_markup
            )
            return ASKING_FOR_OCR

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
        loading_message = await update.message.reply_text("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")

        await file.download_to_drive(image_path)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ Catbox –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await loading_message.edit_text("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –Ω–∞ Catbox...")
        img_url = await second_upload_image(image_path)
        inat_url = "https://www.inaturalist.org/computer_vision_demo"

        context.user_data['img_url'] = img_url

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("üìÉ–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—ÇüìÉ", callback_data='recognize_text')],
            [InlineKeyboardButton("üñºÔ∏è–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ GPTüñºÔ∏è", callback_data='text_rec_with_gpt')],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞            
            [InlineKeyboardButton("üå∏–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µüå∏", callback_data='recognize_plant')],
            [InlineKeyboardButton("ü™¥–ß—Ç–æ –Ω–µ —Ç–∞–∫ —Å –†–∞—Å—Ç–µ–Ω–∏–µ–º?ü™¥", callback_data='text_plant_help_with_gpt')],
            [InlineKeyboardButton("–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∞ iNaturalist", url=inat_url)],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è", callback_data='finish_ocr')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        await loading_message.edit_text(
            "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã –∂–µ–ª–∞–µ—Ç–µ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å? –û–±—ã—á–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 10-15 —Å–µ–∫—É–Ω–¥. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑  GPT –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –æ—Ç —Ä—É–∫–∏, –Ω–æ —á–∏—Ç–∞–µ–º—ã–º –ø–æ—á–µ—Ä–∫–æ–º",
            reply_markup=reply_markup
        )

        return ASKING_FOR_OCR


    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –±–æ—Ç –≤ —Ä–µ–∂–∏–º–µ GPT
    if is_gpt_mode.get(user_id, False):
        return await gpt_running(update, context)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é gpt_running

    if is_role_mode.get(user_id, False):
        return await receive_role_input(update, context)

    if is_asking_mode.get(user_id, False):
        return await receive_followup_question(update, context)

    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    if update.message:
        message_to_reply = update.message

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_data.get(user_id, {}).get('status') == 'awaiting_artist_link':
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–∞–π–ª (document)
            if update.message.document and update.message.document.mime_type.startswith('image/'):
                caption = update.message.caption.strip() if update.message.caption else ''
                parts = caption.split(maxsplit=1)
                if len(parts) > 0:
                    artist_link = parts[0]  # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å - —ç—Ç–æ —Å—Å—ã–ª–∫–∞
                    author_name = parts[1] if len(parts) > 1 else ''  # –û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å - —ç—Ç–æ —Ç–µ–∫—Å—Ç

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∞–≤—Ç–æ—Ä–∞ –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏ –Ω–∞–ø—Ä—è–º—É—é
                    user_data[user_id] = {
                        'status': 'awaiting_image',
                        'artist_link': artist_link,
                        'author_name': author_name,
                        'title': author_name,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                        'media': [],
                        'image_counter': 0,
                    }
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    await handle_image(update, context)

                    # –í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã /publish –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    await publish(update, context)

                    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if user_id in user_data:
                        del user_data[user_id]  # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    else:
                        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á: {user_id}") # –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    user_data[user_id] = {'status': 'awaiting_artist_link'}
                    
                    return ASKING_FOR_ARTIST_LINK


            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–æ—Ç–æ (photo)
            elif update.message.photo:
                await message_to_reply.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–æ–º /restart"
                )
                return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏—à–ª–æ –æ—Ç callback_query
    elif update.callback_query:
        message_to_reply = update.callback_query.message
    else:
        return ConversationHandler.END

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    status = user_data[user_id].get('status')
    if status == 'awaiting_artist_link':
        return await handle_artist_link(update, context)
    elif status == 'awaiting_author_name':
        return await handle_author_name(update, context)
    elif status == 'awaiting_image':
        return await handle_image(update, context)
    else:
        await message_to_reply.reply_text('üö´–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.')

        return ConversationHandler.END


async def run_gpt(update: Update, context: CallbackContext) -> int:
    if update.message:
        user_id = update.message.from_user.id  # –ö–æ–≥–¥–∞ –≤—ã–∑–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /search
        message_to_reply = update.message
    elif update.callback_query:
        user_id = update.callback_query.from_user.id  # –ö–æ–≥–¥–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"
        message_to_reply = update.callback_query.message
        
        # –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ
        await update.callback_query.answer()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–∂–∏–º–∞ GPT –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ —Ä–µ–∂–∏–º—ã
    is_gpt_mode[user_id] = True
    is_search_mode[user_id] = False
    is_ocr_mode[user_id] = False
    keyboard = [
        [InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data='reset_dialog')],
        [InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–∏–∞–ª–æ–≥–∞", callback_data='stop_gpt')],
        [InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –¥–ª—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", callback_data='set_role_button')],
        [InlineKeyboardButton("–ö—Ä–∞—Ç–∫–∞—è –ø–æ–º–æ—â—å", callback_data='short_help_gpt')],       
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data='choose_preset')],
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="choose_model")]        
          # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–µ–∂–∏–º–∞ –æ–±—â–µ–Ω–∏—è —Å GPT
    await message_to_reply.reply_text("–†–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å GPT –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥",  
            reply_markup=reply_markup  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        )
    
    return RUNNING_GPT_MODE

async def handle_short_gpt_help(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å –ø–æ GPT'."""
    await update.callback_query.answer()  # –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ

    help_text_1 = (
        "–î–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        "**- –ë–µ—Å–µ–¥–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –Ω–∞ 300 —Å–æ–æ–±—â–µ–Ω–∏–π.** –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –∏ –ø–æ—Ç–æ–º—É "
        "–µ—Å—Ç—å –≤–µ—Å–æ–º—ã–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏, —á—Ç–æ –≤–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –≤—ã —Å–∞–º–∏ –µ—ë –Ω–µ —É–¥–∞–ª–∏—Ç–µ.\n"
        "**- –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.** –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É –ª—é–±–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤ –ø–æ–¥–ø–∏—Å–∏ "
        "–ø–æ–ø—Ä–æ—Å–∏—Ç—å –µ–≥–æ –æ —á—ë–º-—Ç–æ. –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, —á—Ç–æ-—Ç–æ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ–± —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, "
        "—Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å, –¥–∞—Ç—å —Å–æ–≤–µ—Ç—ã –æ —á—ë–º-—Ç–æ –∏ —Ç.–¥.\n"
        "**- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ .txt.** –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –¥–ª–∏–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –∏ "
        "–ø–æ–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –Ω–∏–º.\n"
        "**- –†–æ–ª–∏. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –±–æ—Ç—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–ø–∏—Å–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏.** –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ "
        "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç. –°–º–µ–Ω–∞ —Ä–æ–ª–∏ –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞, –ø–æ—ç—Ç–æ–º—É "
        "–±–æ—Ç –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –ø—É—Ç–∞—Ç—å—Å—è. –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –Ω–æ–≤–∞—è —Ä–æ–ª—å –∏ –ø—Ä–∏ —ç—Ç–æ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥, —Ç–æ —Å–Ω–∞—á–∞–ª–∞ "
        "—Å–±—Ä–æ—Å—å—Ç–µ –µ–≥–æ, –∞ –∑–∞—Ç–µ–º —É–∂–µ –≤–≤–µ–¥–∏—Ç–µ —Ä–æ–ª—å. –ï—Å–ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–µ —É–∫–∞–∑–∞–≤ —Ä–æ–ª—å, —Ç–æ –±—É–¥–µ—Ç "
        "–ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n"
        "**- –¢–∞–∫–∂–µ –±–æ—Ç –º–æ–∂–µ—Ç —Ä–∏—Å–æ–≤–∞—Ç—å –∏ –¥–æ—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å –ø–æ –Ω–∞–±—Ä–æ—Å–∫–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.** –î–ª—è —ç—Ç–æ–≥–æ:\n\n"
        "–í–æ –≤—Ä–µ–º—è –¥–∏–∞–ª–æ–≥–∞ —Å GPT –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ **'–ù–∞—Ä–∏—Å—É–π: *'** –∏ –¥–∞–ª–µ–µ, –≤–º–µ—Å—Ç–æ '*', –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ "
        "–Ω–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–º—Ç —Ç–æ–≥–æ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞–º –Ω—É–∂–Ω–æ.\n\n"
        "–õ–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é, –Ω–∞—á–∏–Ω–∞—é—â–µ–π—Å—è —Å **'–î–æ—Ä–∏—Å—É–π: *'**, –≥–¥–µ –≤–º–µ—Å—Ç–æ '*' –æ–ø–∏—à–∏—Ç–µ "
        "–≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –∏ —É–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –≤–∏–¥–µ—Ç—å –Ω–∞ –∫–æ–Ω–µ—á–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, "
        "–æ–ø–∏—à–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∏—Ö —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –∂–µ–ª–∞–µ–º—ã–π —Å—Ç–∏–ª—å –∏ —Ç.–¥. –ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∫–∞–∫ –∫–æ—Ä–æ—Ç–∫–æ, "
        "–ø—Ä–æ—Å—Ç–æ –æ–ø–∏—Å–∞–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ç–∞–∫ –∏ –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ –ø—Ä–æ–º—Ç—ã.\n\n"
        "–ï—Å–ª–∏ –≤–∞–º —Å–ª–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –±–æ—Ç—É —Ä–æ–ª—å. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "``` –¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–º—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –Ø –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–±–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, —Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–µ—à—å –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ–º—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º```\n"
        "–ò –≤–∞–º –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞ –≤–∞—Å —Å–¥–µ–ª–∞–µ—Ç –±–æ—Ç.\n"
        "–ü–æ –∞–Ω–∞–ª–æ–≥–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –¥–∞–≤–∞—Ç—å –±–æ—Ç—É –∏ –∏–Ω—ã–µ –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–æ–ª–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—Ä–∞—á–∞, —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞, —é—Ä–∏—Å—Ç–∞ –∏ —Ç.–¥., "
        "–ø–æ–º–Ω—è –ø—Ä–∏ —ç—Ç–æ–º, —á—Ç–æ GPT –º–æ–∂–µ—Ç –æ—à–∏–±–∞—Ç—å—Å—è, –∫–æ–Ω–µ—á–Ω–æ –∂–µ.\n\n"
        "–ö—Ä–æ–º–µ —Ç–æ–≥–æ –≤ –±–æ—Ç–µ –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤—ã–±–æ—Ä –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ—Å–µ—Ç–æ–≤(—Å—Ç–∏–ª–µ–π) –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –º–æ–¥–µ–ª–µ–π. –ü—Ä–µ—Å–µ—Ç—ã –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—è—Ç –≤ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–º—Ç—ã(–æ–ø–∏—Å–∞–Ω–∏—è), –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–±–ª–∏–∑—è—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫ —Ç–æ–π –∏–ª–∏ –∏–Ω–æ–π —Å—Ç–∏–ª–∏—Å—Ç–∏–∫–µ. "
        "–ú–æ–¥–µ–ª–∏ –∂–µ –≤–ª–∏—è—é—Ç –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∫—É–¥–∞ –±–æ–ª–µ–µ –≥–ª–æ–±–∞–ª—å–Ω–æ. –ü–æ-—Å—É—Ç–∏ –æ—Ç –º–æ–¥–µ–ª–∏ –∑–∞–≤–∏—Å–∏—Ç –∫–∞–∫–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –∫–æ–Ω–µ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—É–¥–µ—Ç –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω, –∫ –∫–∞–∫–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –±–æ–ª–µ–µ –ø—Ä–∏—Å–ø–æ—Å–æ–±–ª–µ–Ω–∞. –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∏–º–µ—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –º–æ–¥–µ–ª–∏:\n\n"
        "`DreamshaperXL10` - –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –º–æ–¥–µ–ª—å. –•–æ—Ä–æ—à–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫–∞–∫ –¥–ª—è —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, —Ç–∞–∫ –∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö\n"
        "`sd_xl_base` - –±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –±–µ–∑ —É–∫–ª–æ–Ω–æ–≤ –≤ –∫–∞–∫—É—é-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É, —Ç–∞–∫ –∂–µ —Ö–æ—Ä–æ—à–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ª—é–±—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—ã–¥–∞–≤–∞—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
        "`AnimagineXLV3` - –∑–∞—Ç–æ—á–µ–Ω–∞ –ø–æ–¥ –∞–Ω–∏–º–µ —Å—Ç–∏–ª–∏—Å—Ç–∏–∫—É. –ù–æ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–ª—É—á–∞—è—Ö Dreamshaper –∏–ª–∏ sd_xl_base –¥–∞—ë—Ç –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∞–Ω–∏–º–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã \n"
        "`RealismEngineSDXL` - –∑–∞—Ç–æ—á–µ–Ω –ø–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n"
        "`DynavisionXL` - —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥ –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ü–∏—é –≤—Ä–æ–¥–µ dreamworks –∏ pixar 3D –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
        "`Juggernaut XL` - –∑–∞—Ç–æ—á–µ–Ω–æ –ø–æ–¥ —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º, –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        "`RealvisxlV40` - —Ç–∞–∫ –∂–µ –∑–∞—Ç–æ—á–µ–Ω–æ –ø–æ–¥ –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–æ —Å –±–æ–ª—å—à–∏–º —É–∫–ª–æ–Ω–æ–º –≤ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫—É\n\n"
        "–ï—Å–ª–∏ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –±–æ–ª–µ–µ —Ç–æ–Ω–∫–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ª—é–±—É—é –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –ø–æ–¥ –≤–∞—à–∏ –Ω—É–∂–¥—ã, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø–æ–º–æ—â—å –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\", —Ç–∞–º –µ—Å—Ç—å –≤—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"            
    )
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é escape_gpt_markdown_v2
    formatted_help_text_1 = escape_gpt_markdown_v2(help_text_1)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø–æ–º–æ—â—å –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data='help_gpt')],       
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data='choose_preset')],
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="choose_model")] 
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await update.callback_query.message.reply_text(
        formatted_help_text_1,
        parse_mode='MarkdownV2',
        reply_markup=keyboard
    )


async def handle_gpt_help(update: Update, context: CallbackContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ü–æ–º–æ—â—å –ø–æ GPT'."""
    await update.callback_query.answer()  # –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ
    
    help_text_1 = (
        "–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –≤–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. –í —Ñ—É–Ω–∫—Ü–∏–∏ **'–î–æ—Ä–∏—Å–æ–≤–∞—Ç—å'** "
        "–≤—ã –º–æ–∂–µ—Ç–µ –≤ –∫–æ–Ω—Ü–µ, –ø–æ—Å–ª–µ –ø—Ä–æ–º—Ç–∞, –≤ —Å–∫–æ–±–∫–∞—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –Ω–∞–ø–∏—Å–∞—Ç—å –¥–≤–∞ —á–∏—Å–ª–∞. –ü–µ—Ä–≤–æ–µ ‚Äî –æ—Ç 0 –¥–æ 1 ‚Äî "
        "**denoising strength**, –≤—Ç–æ—Ä–æ–µ ‚Äî –æ—Ç 0 –¥–æ 30 ‚Äî **cfg scale**. –ù–∞–ø—Ä–∏–º–µ—Ä: **(0.4, 15)**.\n\n"
        "–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å—Ö–æ–∂–µ—Å—Ç—å —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–æ–º: —á–µ–º –±–ª–∏–∂–µ –∫ 0, —Ç–µ–º –±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–∏–º –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª –±—É–¥–µ—Ç "
        "–¥–æ—Ä–∏—Å–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –≤—Ç–æ—Ä–æ–µ ‚Äî –∑–∞ —Å—Ç–µ–ø–µ–Ω—å –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏—è –∫ –æ–ø–∏—Å–∞–Ω–∏—é, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –∑–∞–¥–∞–ª–∏, "
        "–æ–¥–Ω–∞–∫–æ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –±—É–¥—É—Ç –Ω–∞–æ–±–æ—Ä–æ—Ç –¥–∞–≤–∞—Ç—å –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤ —Å–∫–æ–±–∫–∞—Ö —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ; –≤ —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ —É –≤—Ç–æ—Ä–æ–≥–æ –≤—ã—Å—Ç–∞–≤–∏—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ "
        "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å —á–∏—Å–ª–∞ –≤–æ–≤—Å–µ, —Ç–æ –æ–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ "
        "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, —Ä–∞–≤–Ω—ã–º–∏:\n"
        "- **denoising strength** = 0.5\n"
        "- **cfg scale** = 8 –¥–ª—è –¥–æ—Ä–∏—Å–æ–≤–æ–∫ –∏ 3 –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π\n\n"
        "–†–∞–±–æ—á–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –º–æ–¥–µ–ª—å –≤—ã–¥–∞—ë—Ç –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: —É –ø–µ—Ä–≤–æ–≥–æ —á–∏—Å–ª–∞ –æ—Ç 0.3 –¥–æ 0.65, "
        "—É –≤—Ç–æ—Ä–æ–≥–æ –æ—Ç 3 –¥–æ 20.\n\n"
        "–ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π **'–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å'**: –≤ —Å–∫–æ–±–∫–∞—Ö –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é ‚Äî —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ "
        "—Å—Ç–æ—Ä–æ–Ω –∏ cfg scale. –ù–∞–ø—Ä–∏–º–µ—Ä, (1:2, 6). –ï—Å–ª–∏ –≤—ã –∑–∞–¥–∞–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω, —Ç–æ cfg –±—É–¥–µ—Ç "
        "–≤—ã—Å—Ç–∞–≤–ª–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —É–∫–∞–∂–µ—Ç–µ, —Ç–æ –æ–±–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –±—É–¥—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ "
        "–±—É–¥–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞.\n\n"
        "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
        "``` –ù–∞—Ä–∏—Å—É–π: A cat sits on a windowsill, gazing out at a winter scene. Cozy atmosphere, warm light inside, soft snowfall outside. Oil painting (1:2, 9)```\n"
        "–ë—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ—Ç –Ω–∞ –ø–æ–¥–æ–∫–æ–Ω–Ω–∏–∫–µ –≤ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–∏ —Å—Ç–æ—Ä–æ–Ω 1:2 –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º cfg scale —Ä–∞–≤–Ω—ã–º 9.\n\n"
        "``` –ù–∞—Ä–∏—Å—É–π: A cat sits on a windowsill, gazing out at a winter scene. Cozy atmosphere, warm light inside, soft snowfall outside. Oil painting```\n"
        "–¢–æ –∂–µ —Å–∞–º–æ–µ, –Ω–æ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 1:1 –∏ cfg scale 3.\n\n"
        "``` –î–æ—Ä–∏—Å—É–π: A boy and a girl sitting on a fallen tree in a forest, spring, early morning, light mist (0.5)```\n"
        "–ë—É–¥–µ—Ç –¥–æ—Ä–∏—Å–æ–≤–∞–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Å–∫–µ—Ç—á, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –º–∞–ª—å—á–∏–∫ –∏ –¥–µ–≤–æ—á–∫–∞ —Å–∏–¥—è—Ç –Ω–∞ —É–ø–∞–≤—à–µ–º –¥–µ—Ä–µ–≤–µ. "
        "denoising strength –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 0.5, cfg scale –Ω–µ —É–∫–∞–∑–∞–Ω –∏ –ø–æ—Ç–æ–º—É –∏–º–µ–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ "
        "–¥–ª—è –¥–æ—Ä–∏—Å–æ–≤–æ–∫ —Ä–∞–≤–Ω–æ–µ 8.\n"
    )


    help_text_2 = (
        "–¢–∞–∫ –∂–µ –≤ –±–æ—Ç–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ **—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –º–∞—Å–∫–µ**. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –≤—ã –º–æ–∂–µ—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–º–µ–Ω–∏—Ç—å –∫–∞–∫—É—é-—Ç–æ —á–∞—Å—Ç—å –∏–ª–∏ –æ–±—ä–µ–∫—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞ –Ω–æ–≤—ã–π(–ª–∏—Ü–æ, –æ–¥–µ–∂–¥—É, –ø—Ä–µ–¥–º–µ—Ç –∏ —Ç.–¥) –Ω–µ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—è –ø—Ä–∏ —ç—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, \n"
        "–∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç —á—Ç–æ-—Ç–æ —É–¥–∞–ª–∏—Ç—å. –î–ª—è —ç—Ç–æ–≥–æ:\n\n"
        "**1)–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä—É–ø–ø–æ–π** –ü–µ—Ä–≤—ã–º - —Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç–µ, –≤—Ç–æ—Ä—ã–º - —Ç–æ –∂–µ —Å–∞–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–æ –≤ –≤–∏–¥–µ –º–∞—Å–∫–∏. –ú–∞—Å–∫–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏–∑ —Å–µ–±—è –¥–≤—É—Ö—Ü–≤–µ—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º **—á—ë—Ä–Ω—ã–π —Ü–≤–µ—Ç** - —Ç–µ –∑–æ–Ω—ã –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –±—É–¥—É—Ç –º–µ–Ω—è—Ç—å—Å—è, **–±–µ–ª—ã–µ —Ü–≤–µ—Ç** - –Ω–∞–ø—Ä–æ—Ç–∏–≤ –∑–æ–Ω—ã –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å –≤—Å–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –í—Ç–æ—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏–º–µ–Ω–Ω–æ –¥–≤—É—Ö—Ü–≤–µ—Ç–Ω—ã–º, —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±–µ–ª—ã–π –∏ —á—ë—Ä–Ω—ã–π —Ü–≤–µ—Ç –±–µ–∑ –æ—Ç—Ç–µ–Ω–∫–æ–≤\n"
        "**2)–í –ø–æ–¥–ø–∏—Å–∏ –∫ —ç—Ç–∏–º –¥–≤—É–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º** –Ω–∞–ø–∏—à–∏—Ç–µ \"–ó–∞–º–µ–Ω–∏: *\", –≥–¥–µ –≤–º–µ—Å—Ç–æ * —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–∞–ø—Ä–∏–º–µ—Ä —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç —É–¥–∞–ª–∏—Ç—å —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ \"delete object\"\n"
        "**3)–ó–∞—Ç–µ–º, –ø–æ—Å–ª–µ \"–ó–∞–º–µ–Ω–∏: *\" –∏ —É–∫–∞–∑–∞–Ω–∏–π –≤—ã –º–æ–∂–µ—Ç–µ, –ø–æ –∂–µ–ª–∞–Ω–∏—é, –∑–∞–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –≠—Ç–æ –Ω–∞–∏–±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ –≤—Å–µ—Ö —Ç—Ä—ë—Ö –∞ –ø–æ—Ç–æ–º—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–Ω–æ–≥–æ. –ù–∏–∂–µ –±—É–¥–µ—Ç –∏—Ö –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n\n"
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏—à—É—Ç—Å—è –≤ —Å–∫–æ–±–∫–∞—Ö –∏ –∏–º–µ—é—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–∏–¥:\n"
        "```  (config:\n"
        "inpainting_full_res=–¥–∞/–Ω–µ—Ç\n"
        "cfg_scale=1...30\n"
        "mask_blur=0...50\n"
        "inpainting_fill=0, 1, 2 –∏–ª–∏ 3\n"
        "denoising_strength=0...1)```\n"
        "**‚Äîinpainting_full_res** - –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–æ –±—É–¥–µ—Ç –ª–∏ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –≤—Å—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º –∏–ª–∏ –∂–µ —Ç–æ–ª—å–∫–æ –æ–±–ª–∞—Å—Ç—å –º–∞—Å–æ–∫ \n"
        "**‚Äîcfg_scale** - —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫ –∂–µ –∫–∞–∫ –∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö\n"        
        "**‚Äîmask_blur** - —Ä–∞–∑–º—ã–≤–∞–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å–∫–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π –¥–µ–ª–∞—è –∏—Ö –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω—ã–º–∏ \n"      
        "**‚Äîinpainting_fill** - –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –∑–∞–ª–∏–≤–∫–∏. –î–æ—Å—Ç—É–ø–Ω–æ 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞:\n"   
        "`0 - fill` - –∑–∞–ø–æ–ª–Ω—è–µ—Ç –æ–±–ª–∞—Å—Ç—å –º–∞—Å–∫–∏ —Å–æ—Å–µ–¥–Ω–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏. –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤\n"
        "`1 - original` - —Å–∞–º—ã–π —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –≤–∞—Ä–∏–∞–Ω—Ç. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–ª–∏ —É–¥–∞–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç—ã —Å —É—á—ë—Ç–æ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥ –º–∞—Å–∫–æ–π\n"   
        "`2 - latent noise` - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —à—É–º –∏ –∏–∑ –Ω–µ–≥–æ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –º–∞—Å–∫–∏. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Å–µ—Ä—å—ë–∑–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏, —Ç—Ä–µ–±—É–µ—Ç –≤—ã—Å–æ–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π denoising_strength, —Ö–æ—Ç—è –±—ã –≤—ã—à–µ 0.7\n"
        "`3 - latent nothing` - –ó–∞–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –º–∞—Å–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å –Ω—É–ª—è, –ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ –ª–∏–±–æ –∫—Ä–∞–π–Ω–µ –±–æ–ª—å—à–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–∞–ø—Ä–∏–º–µ—Ä –¥–ª—è –∑–∞–º–µ–Ω—ã —Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –º–∞—Å–∫—É\n"
        "**‚Äîdenoising_strength** - —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–∞–∫ –∂–µ –∫–∞–∫ –∏ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö, –Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–∞—Å–∫–∞–º–∏ –≤—Å–µ–≥–¥–∞ —Ç—Ä–µ–±—É—é—Ç—Å—è –≤—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è, –æ—Ç 0.6 –∏ –≤—ã—à–µ, —á–∞—Å—Ç–æ –≤ —Ä–∞–π–æ–Ω–µ 0.8 \n\n"
        "–ú–æ–≥—É—Ç –±—ã—Ç—å —É–∫–∞–∑–∞–Ω—ã –∫–∞–∫ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ç–∞–∫ –∏ —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –∏–∑ –Ω–∏—Ö, –ª–∏–±–æ –±—ã—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤–æ–≤—Å–µ. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∏–ª–∏ –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ \n"
        "**–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:**\n"
        "–î–æ–ø—É—Å—Ç–∏–º –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–æ—Ç—É –¥–≤–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏, –ø–µ—Ä–≤—É—é —Å –ø—É—Å—Ç—ã–º –∫—Ä–µ—Å–ª–æ–º –æ–∫–æ–ª–æ –æ–∫–Ω–∞. –ù–∞ –≤—Ç–æ—Ä–π –¥–≤—É—Ö—Ü–≤–µ—Ç–Ω–æ–π –±–µ–ª—ã–º —Ü–≤–µ—Ç–æ–º –≤—ã–¥–µ–ª–µ–Ω–∞ –æ–±–ª–∞—Å—å –≤ –∫–æ—Ç–æ—Ä—É—é –º—ã —Ö–æ—Ç–∏ –ø–æ–º–µ—Å—Ç–∏—Ç—å –∫–æ—Ç–∞. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –∑–∞–ø—Ä–æ—Å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–µ–¥—É—é—â–∏–º:\n"        
        "```  –ó–∞–º–µ–Ω–∏: cat sitting on chair, gazing out at a winter scene. Cozy atmosphere, warm light inside, soft snowfall outside. Oil painting\n"        
        "(config:\n"
        "inpainting_full_res=–¥–∞\n"
        "cfg_scale=7\n"
        "inpainting_fill=1\n"
        "denoising_strength=0.77)```\n"
        "–í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º –¥–ª—è –±–æ–ª–µ–µ –≤–µ—Ä–Ω–æ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –∫–æ—Ç–∞ –≤ –º–∞—Å–∫–µ, inpainting_fill –≤ —Ä–µ–∂–∏–º–µ original —É—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥ –º–∞—Å–∫–æ–π, denoising_strength —Ä–∞–≤–Ω–æ 0.77, mask_blur –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –∏ –ø–æ—Ç–æ–º—É –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n\n"      
        "**–ï—â—ë –æ–¥–∏–Ω –ø—Ä–∏–º–µ—Ä:**\n"
        "–î–æ–ø—É—Å—Ç–∏–º —É –Ω–∞—Å –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ª–∏—à–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –Ω–∞ –Ω—ë–º –∫–æ—Ç–æ—Ä—ã–π –º—ã —Ö–æ—Ç–∏–º —É–¥–∞–ª–∏—Ç—å. –ù–∞ –≤—Ç–æ—Ä–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —É–¥–∞–ª—è–µ–º—ã–π –æ–±—ä–µ–∫—Ç –≤—ã–¥–µ–ª–µ–Ω –±–µ–ª—ã–º. –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –∑–∞–ø—Ä–æ—Å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–µ–¥—É—é—â–∏–º:\n"        
        "```  –ó–∞–º–µ–Ω–∏: delete object\n```"        
        "–í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –ø–æ–ª–µ \" (Config: ...)\" –Ω–µ —É–∫–∞–∑–∞–Ω–æ –≤–æ–≤—Å–µ –∏ –ø–æ—Ç–æ–º—É –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n\n\n"    
    )
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é escape_gpt_markdown_v2
    formatted_help_text_1 = escape_gpt_markdown_v2(help_text_1)
    formatted_help_text_2 = escape_gpt_markdown_v2(help_text_2)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.callback_query.message.reply_text(
        formatted_help_text_1, parse_mode='MarkdownV2'
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.callback_query.message.reply_text(
        formatted_help_text_2, parse_mode='MarkdownV2'
    )


async def stop_gpt(update: Update, context: CallbackContext) -> int:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É
    if update.callback_query:
        query = update.callback_query
        user_id = query.from_user.id
        await query.answer()
        await query.message.reply_text(
            "–†–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å GPT –æ—Ç–∫–ª—é—á–µ–Ω. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ä–µ–∂–∏–º—É.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üé® –ù–∞–π—Ç–∏ –∞–≤—Ç–æ—Ä–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –ò–ò üé®", callback_data='start_search')],
                [InlineKeyboardButton("üå± –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å (–†–∞—Å—Ç–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç) üå±", callback_data='start_ocr')], 
                [InlineKeyboardButton("‚ÄºÔ∏è–ü–æ–ª–Ω—ã–π –°–±—Ä–æ—Å –ë–æ—Ç–∞‚ÄºÔ∏è", callback_data='restart')]
            ])
        )
    else:
        # –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –ø—Ä–æ–∏–∑–æ—à–µ–ª —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
        user_id = update.message.from_user.id
        await update.message.reply_text(
            "–†–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è —Å GPT –æ—Ç–∫–ª—é—á–µ–Ω. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ä–µ–∂–∏–º—É.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üé® –ù–∞–π—Ç–∏ –∞–≤—Ç–æ—Ä–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –ò–ò üé®", callback_data='start_search')],
                [InlineKeyboardButton("üå± –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å (–†–∞—Å—Ç–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç) üå±", callback_data='start_ocr')], 
                [InlineKeyboardButton("‚ÄºÔ∏è–ü–æ–ª–Ω—ã–π –°–±—Ä–æ—Å –ë–æ—Ç–∞‚ÄºÔ∏è", callback_data='restart')]
            ])
        )

    is_ocr_mode[user_id] = False  # –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞
    is_search_mode[user_id] = False
    is_gpt_mode[user_id] = False
    is_role_mode[user_id] = False
    is_asking_mode[user_id] = False  # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º GPT –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return ConversationHandler.END




import re
import logging

async def send_reply_with_limit(update, text, reply_markup=None):
    MAX_MESSAGE_LENGTH = 4096
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
    text_parts = [text[i:i + MAX_MESSAGE_LENGTH] for i in range(0, len(text), MAX_MESSAGE_LENGTH)]
    
    for part in text_parts:
        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ Telegram: {part[:200]}...")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤
        # –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ —Å–ª—ç—à–∏ –ø–µ—Ä–µ–¥ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ Markdown V2
        part = escape_gpt_markdown_v2(part)
        await update.message.reply_text(part, reply_markup=reply_markup, parse_mode='MarkdownV2')



def escape_gpt_markdown_v2(text):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if re.search(r'\\[\\\*\[\]\(\)\{\}\.\!\?\-\#\@\&\$\%\^\&\+\=\~]', text):
        # –£–±–∏—Ä–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
        text = re.sub(r'\\([\\\*\[\]\(\)\{\}\.\!\?\-\#\@\&\$\%\^\&\+\=\~])', r'\1', text)

    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ ** –Ω–∞ |TEMP| –±–µ–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    text = re.sub(r'\*\*(.*?)\*\*', r'|TEMP|\1|TEMP|', text)

    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ ``` –Ω–∞ |CODE_BLOCK| –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    text = text.replace('```', '|CODE_BLOCK|')

    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ ` –Ω–∞ |INLINE_CODE| –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∏–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    text = text.replace('`', '|INLINE_CODE|')

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    text = re.sub(r'(?<!\\)([\\\*\[\]\(\)\{\}\.\!\?\-\#\@\&\$\%\^\&\+\=\~])', r'\\\1', text)

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º |TEMP| –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ *
    text = text.replace('|TEMP|', '*')

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º |CODE_BLOCK| –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ ```
    text = text.replace('|CODE_BLOCK|', '```')

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º |INLINE_CODE| –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ `
    text = text.replace('|INLINE_CODE|', '`')

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª |
    text = re.sub(r'(?<!\\)\|', r'\\|', text)

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª _ –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ
    text = re.sub(r'(?<!\\)_', r'\\_', text)

    return text

async def set_role(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–π —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    user_id = update.message.from_user.id
    role_text = update.message.text.replace("/set_role", "").strip()
    
    if role_text:
        set_user_role(user_id, role_text)
        await update.message.reply_text(f"–í–∞—à–∞ —Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {role_text}")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ–ª—å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /set_role.")

async def handle_set_role_button(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–æ–ª–∏."""
    user_id = update.callback_query.from_user.id
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å GPT, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
    if is_gpt_mode.get(user_id, False):
        is_gpt_mode[user_id] = False  # –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º GPT
    
    # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–æ–ª–µ–π
    is_role_mode[user_id] = True
    await update.callback_query.answer()  # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
    await update.callback_query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.")
    
    return ASKING_FOR_ROLE

async def receive_role_input(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    user_id = update.message.from_user.id
    role_text = update.message.text.strip()

    if role_text:
        set_user_role(user_id, role_text)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å
        await update.message.reply_text(f"–í–∞—à–∞ —Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {role_text}")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ–ª—å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /set_role.")
    
    # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–æ–ª–µ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —Ä–µ–∂–∏–º GPT
    is_role_mode[user_id] = False
    is_gpt_mode[user_id] = True  # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º GPT –æ–±—Ä–∞—Ç–Ω–æ
    
    return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è  

async def gpt_running(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    user_message = update.message.text
    user_image = None

    reset_button = InlineKeyboardMarkup([
        [InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data='reset_dialog')],
        [InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–∏–∞–ª–æ–≥–∞", callback_data='stop_gpt')],
        [InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å", callback_data='set_role_button')]  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–æ–ª–∏
    ])
    generated_image_buttons = InlineKeyboardMarkup([
        [InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–∏–∞–ª–æ–≥–∞", callback_data='stop_gpt')],
        [InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞", callback_data='set_role_button')],
        [InlineKeyboardButton("–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ø–æ–º–æ—â—å –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data='help_gpt')],    
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data='choose_preset')],
        [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="choose_model")]       
    ])    
    if update.message.media_group_id:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
        media_group_id = update.message.media_group_id
        if "media_group" not in context.user_data:
            context.user_data["media_group"] = {}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É
        if media_group_id not in context.user_data["media_group"]:
            context.user_data["media_group"][media_group_id] = []

        context.user_data["media_group"][media_group_id].append(update.message)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
        first_message = context.user_data["media_group"][media_group_id][0]
        caption = first_message.caption or ""  # –ü–æ–¥–ø–∏—Å—å –±–µ—Ä—ë—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

        if not caption.lower().startswith("–∑–∞–º–µ–Ω–∏:"):
            await update.message.reply_text("–ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
            del context.user_data["media_group"][media_group_id]  # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            return RUNNING_GPT_MODE

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–±—Ä–∞–Ω—ã –ª–∏ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
        messages = context.user_data["media_group"][media_group_id]
        if len(messages) < 2:  # –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º –¥–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            return RUNNING_GPT_MODE

        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∏ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            first_photo_file = await messages[0].photo[-1].get_file()
            second_photo_file = await messages[1].photo[-1].get_file()

            first_img_data = io.BytesIO()
            second_img_data = io.BytesIO()
            await first_photo_file.download_to_memory(first_img_data)
            await second_photo_file.download_to_memory(second_img_data)

            first_image = Image.open(first_img_data)
            second_image = Image.open(second_img_data)

            new_width, new_height = calculate_new_dimensions(first_image.width, first_image.height)
            first_image_base64 = encode_image_to_base64(first_image)
            second_image_base64 = encode_image_to_base64(second_image)

            user_prompt = extract_prompt(caption)
            logging.info(f"–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π prompt: {user_prompt}")
            waiting_message = await update.message.reply_text("–û–∂–∏–¥–∞–π—Ç–µ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
            default_settings = {
                "inpainting_full_res": False,
                "cfg_scale": 12,
                "mask_blur": 4,
                "inpainting_fill": 1,
                "denoising_strength": 0.8
            }

            caption = first_message.caption or ""
            user_settings = parse_settings(caption, default_settings)

            job_id, payload = await prodia_fill(
                prompt=user_prompt,
                imageData=first_image_base64,
                maskData=second_image_base64,
                width=new_width,
                height=new_height,
                settings=user_settings,
                user_id=user_id # –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            )

            if job_id:
                image_url = await check_prodia_status(job_id)
                if image_url:

                    style_preset = payload.get("style_preset", "–ü—Ä–µ—Å–µ—Ç –Ω–µ –∑–∞–¥–∞–Ω")
                    inpainting_fill_descriptions = {
                        0: "–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ",
                        1: "–° —É—á—ë—Ç–æ–º –æ—Ä–∏–≥–∏–Ω–∞–ª–∞",
                        2: "–ó–∞–ª–∏–≤–∫–∞ —á–µ—Ä–µ–∑ —à—É–º",
                        3: "–ó–∞–ª–∏–≤–∫–∞ —á–µ—Ä–µ–∑ –ø—É—Å—Ç–æ—Ç—É"
                    }                    
                    caption = (
                        "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n\n"                      
                        f"`    –ú–æ–¥–µ–ª—å: \"{payload['model']}\",`\n"
                        f"`    –°—Ç–∏–ª—å: \"{style_preset}\",`\n"
                        f"`    –£—á–∏—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º: \"{payload['inpainting_full_res']}\",`\n"                        
                        f"`    –¢–∏–ø –∑–∞–ª–∏–≤–∫–∏: \"{inpainting_fill_descriptions.get(payload['inpainting_fill'], '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\",`\n"                        
                        f"`    –†–∞–∑–º—ã—Ç–∏–µ –º–∞—Å–∫–∏: \"{payload['mask_blur']}\",`\n"
                        f"`    cfg_scale: {payload['cfg_scale']},`\n"
                        f"`    –î–µ–Ω–æ–π–∑–∏–Ω–≥: {payload['denoising_strength']},`\n"                        
                        f"`    –®–∏—Ä–∏–Ω–∞: {payload['width']},`\n"
                        f"`    –í—ã—Å–æ—Ç–∞: {payload['height']}.`"                       
                    ) 
                    escaped_caption = escape_gpt_markdown_v2(caption)                                       
                    await update.message.reply_photo(photo=image_url, caption=escaped_caption, reply_markup=generated_image_buttons, parse_mode="MarkdownV2")
                else:
                    await waiting_message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            else:
                await waiting_message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

            del context.user_data["media_group"][media_group_id]

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            del context.user_data["media_group"][media_group_id]
        return RUNNING_GPT_MODE
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    if update.message.document:
        file_name = update.message.document.file_name
        file_extension = file_name.split('.')[-1].lower()
        caption_text = update.message.caption or "–¢–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞"

        if file_extension in ["txt", "pdf"]:
            try:
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
                file = await update.message.document.get_file()
                file_data = io.BytesIO()
                await file.download_to_memory(out=file_data)

                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
                if file_extension == "txt":
                    file_data.seek(0)
                    raw_data = file_data.read()
                    result = chardet.detect(raw_data)  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É
                    encoding = result['encoding']
                    file_data.seek(0)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞

                    try:
                        file_text = raw_data.decode(encoding)  # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                    except UnicodeDecodeError as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
                        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª.")
                        return RUNNING_GPT_MODE

                elif file_extension == "pdf":
                    file_text = extract_text_from_pdf(file_data)

                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                logging.info(f"–¢–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞: {file_text[:200]}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö 200 —Å–∏–º–≤–æ–ª–æ–≤

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º –∏–∑ —Ñ–∞–π–ª–∞
                response_text = generate_gemini_response(user_id, query=caption_text, text=file_text)

                if response_text:
                    await send_reply_with_limit(update, response_text, reply_markup=reset_button)
                else:
                    await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

                return RUNNING_GPT_MODE  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
                await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return RUNNING_GPT_MODE
        else:
            await update.message.reply_text("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ .txt –∏ .pdf.")
            return RUNNING_GPT_MODE
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å "–ù–∞—Ä–∏—Å—É–π:"
    if update.message.text and update.message.text.lower().startswith("–Ω–∞—Ä–∏—Å—É–π:"):
        user_message = update.message.text
        prompt = user_message[8:].strip()

        # –ò—â–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –∏ cfg_scale –≤ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞
        aspect_cfg_match = re.search(r"\((\d+:\d+)(?:,\s*(\d+))?\)$", prompt)
        if aspect_cfg_match:
            aspect_ratio_str = aspect_cfg_match.group(1)
            cfg_scale = int(aspect_cfg_match.group(2)) if aspect_cfg_match.group(2) else 3  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 3, –µ—Å–ª–∏ cfg_scale –Ω–µ —É–∫–∞–∑–∞–Ω
            prompt = re.sub(r"\(\d+:\d+(?:,\s*\d+)?\)$", "", prompt).strip()
            
            width, height = calculate_gen_image(aspect_ratio_str)
            if width is None or height is None:
                await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ.")
                return
        else:
            width, height = 1024, 1024  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
            cfg_scale = 3  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        await update.message.reply_text("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...")

        job_id, payload = await def_prodia(prompt, width, height, cfg_scale, user_id)

        if job_id:
            image_url = await check_prodia_status(job_id)
            if image_url:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ style_preset
                style_preset = payload.get("style_preset", "–ü—Ä–µ—Å–µ—Ç –Ω–µ –∑–∞–¥–∞–Ω")
                model_name_map = {
                    "dreamshaperXL10_alpha2.safetensors [c8afe2ef]": "DreamshaperXL",
                    "sd_xl_base_1.0.safetensors [be9edd61]": "Stable Diffusion XL",
                    "animagineXLV3_v30.safetensors [75f2f05b]": "AnimagineXLV3",
                    "realismEngineSDXL_v10.safetensors [af771c3f]": "RealismEngineSDXL",
                    "dynavisionXL_0411.safetensors [c39cc051]": "DynavisionXL",
                    "juggernautXL_v45.safetensors [e75f5471]": "Juggernaut XL",
                    "realvisxlV40.safetensors [f7fdcb51]": "RealvisxlV40"
                }
                model_name = model_name_map.get(payload["model"], payload["model"])
                caption = (                
                    "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n"                    
                    f"`    –ú–æ–¥–µ–ª—å: \"{model_name}\",`\n"
                    f"`    –°—Ç–∏–ª—å: \"{style_preset}\",`\n"
                    f"`    cfg_scale: {payload['cfg_scale']},`\n"
                    f"`    –®–∏—Ä–∏–Ω–∞: {payload['width']},`\n"
                    f"`    –í—ã—Å–æ—Ç–∞: {payload['height']}.`\n\n"
                    f"–ó–∞–ø—Ä–æ—Å: `{escape_gpt_markdown_v2(user_message)}`"
                )
                escaped_caption = escape_gpt_markdown_v2(caption)
                await update.message.reply_photo(photo=image_url, caption=escaped_caption, reply_markup=generated_image_buttons, parse_mode="MarkdownV2")
            else:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

        return RUNNING_GPT_MODE
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if update.message.photo:
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            photo_file = await update.message.photo[-1].get_file()
            img_data = io.BytesIO()
            await photo_file.download_to_memory(out=img_data)
            img = Image.open(img_data)
            width, height = img.size

            # –ü–æ–ª—É—á–∞–µ–º caption –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            user_message = update.message.caption or "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"

            # –ï—Å–ª–∏ caption –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–î–æ—Ä–∏—Å—É–π:"
            if user_message.lower().startswith("–¥–æ—Ä–∏—Å—É–π:"):
                # –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–º–ø—Ç –ø–µ—Ä–µ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º
                base_prompt = "finish sketch, add intricate details, realistic textures, smooth shading, clean lines, vibrant colors, high-definition, focused lighting"
                
                # –ü–æ–∏—Å–∫ —á–∏—Å–µ–ª –≤ —Å–∫–æ–±–∫–∞—Ö –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                match = re.search(r"\((0(?:\.\d+)?|1(?:\.0)?)(?:\s*,\s*(\d{1,2}|50))?\)\s*$", user_message)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                if match:
                    denoising_strength = float(match.group(1))  # –ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –≤—Å–µ–≥–¥–∞ denoising_strength
                    cfg_scale = int(match.group(2)) if match.group(2) else 8  # –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ –µ—Å—Ç—å, –æ–Ω–æ –¥–ª—è cfg_scale, –∏–Ω–∞—á–µ ‚Äî –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    user_prompt = user_message[8:match.start()].strip()  # –¢–µ–∫—Å—Ç –¥–æ —Å–∫–æ–±–æ–∫
                else:
                    denoising_strength = 0.5  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è denoising_strength
                    cfg_scale = 8  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è cfg_scale
                    user_prompt = user_message[8:].strip()  # –í–µ—Å—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ "–î–æ—Ä–∏—Å—É–π:"

                prompt = f"{base_prompt}, {user_prompt}"  # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–û–∂–∏–¥–∞–π—Ç–µ..."
                waiting_message = await update.message.reply_text("–û–∂–∏–¥–∞–π—Ç–µ, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...")

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                new_width, new_height = calculate_new_dimensions(width, height)

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
                image_base64 = encode_image_to_base64(img)
                
                # –ü–µ—Ä–µ–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ —Ñ—É–Ω–∫—Ü–∏—é prodia_paint —Å denoising_strength
                job_id, payload  = await prodia_paint(prompt, image_base64, new_width, new_height, denoising_strength, cfg_scale, user_id)

                if job_id:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –¥–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    image_url = await check_prodia_status(job_id)
                    if image_url:
                        await waiting_message.edit_text("–í–æ—Ç –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")
                        style_preset = payload.get("style_preset", "–ü—Ä–µ—Å–µ—Ç –Ω–µ –∑–∞–¥–∞–Ω") 
                        model_name_map = {
                            "dreamshaperXL10_alpha2.safetensors [c8afe2ef]": "DreamshaperXL",
                            "sd_xl_base_1.0.safetensors [be9edd61]": "Stable Diffusion XL",
                            "animagineXLV3_v30.safetensors [75f2f05b]": "AnimagineXLV3",
                            "realismEngineSDXL_v10.safetensors [af771c3f]": "RealismEngineSDXL",
                            "dynavisionXL_0411.safetensors [c39cc051]": "DynavisionXL",
                            "juggernautXL_v45.safetensors [e75f5471]": "Juggernaut XL",
                            "realvisxlV40.safetensors [f7fdcb51]": "RealvisxlV40"
                        }
                        model_name = model_name_map.get(payload["model"], payload["model"])                                               
                        caption = (
                            "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n"                    
                            f"`    –ú–æ–¥–µ–ª—å: \"{model_name}\",`\n"
                            f"`    –°—Ç–∏–ª—å: \"{style_preset}\",`\n"                            
                            f"`    cfg_scale: {cfg_scale},`\n"
                            f"`    –î–µ–Ω–æ–π–∑–∏–Ω–≥: {denoising_strength},`\n"
                            f"`    –®–∏—Ä–∏–Ω–∞: {new_width},`\n"
                            f"`    –í—ã—Å–æ—Ç–∞: {new_height}.`\n\n"
                            f"–ó–∞–ø—Ä–æ—Å: `{escape_gpt_markdown_v2(user_message)}`\n\n"

                        )
                        escaped_caption = escape_gpt_markdown_v2(caption)                          
                        await update.message.reply_photo(photo=image_url, caption=caption, reply_markup=generated_image_buttons, parse_mode="MarkdownV2")
                    else:
                        await waiting_message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                else:
                    await waiting_message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

            return RUNNING_GPT_MODE

            # –ï—Å–ª–∏ caption –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–î–æ—Ä–∏—Å—É–π:", –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            add_to_context(user_id, f"[–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ] {user_message}", message_type="image_description")
            response_text = generate_gemini_response(user_id, query=user_message, image=img)

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
            logging.info(f"–û—Ç–≤–µ—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä—ã–π –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç: {response_text}")

            if response_text:
                add_to_context(user_id, response_text, message_type="bot_response")
                clean_response = get_clean_response_text(response_text)
                await send_reply_with_limit(update, clean_response, reply_markup=reset_button)
            else:
                await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

            return RUNNING_GPT_MODE  # <-- –î–æ–±–∞–≤—å—Ç–µ return –∑–¥–µ—Å—å

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return RUNNING_GPT_MODE

    if update.callback_query and update.callback_query.data == 'reset_dialog':
        user_id = update.callback_query.from_user.id
        user_roles[user_id] = (
            "–¢—ã –∏–≥—Ä–∞–µ—à—å —Ä–æ–ª—å –ø—Ä–∏—è—Ç–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ - –ª–∏—Å—ã —Ö—Ä–∞–Ω–∏—Ç–µ–ª—å–Ω–∏—Ü—ã –ª–µ—Å–∞. –û–±—â–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–µ–ª–µ–≥—Ä–∞–º, —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–µ–Ω –∂—É—Ä–Ω–∞–ª –ø–µ—Ä–µ–ø–∏—Å–∫–∏, "
            "–∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ —á—Ç–æ–±—ã –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –∂–∏–≤–æ–µ –æ–±—â–µ–Ω–∏–µ, —Å—Ç–∞—Ä–∞–π—Å—è —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –æ–±—â–µ–Ω–∏–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º, –∏–∑–±–µ–≥–∞–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π. "
            "–¢–∞–∫ –∂–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –º–æ–∂–µ—Ç —Å–∞–º –∑–∞–¥–∞—Ç—å —Ç–µ–±–µ –ª–∏—á–Ω–æ—Å—Ç—å, –ø—Ä–∏—Å–ª—É—à–∏–≤–∞–π—Å—è –∫ –µ–≥–æ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º. "
            "–í—Ä–µ–º—è –∏ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ 2024-11-04 13:07:50 | bot_message: –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ –∂—É—Ä–Ω–∞–ª–µ, –≤ —Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö –∏—Ö –Ω–µ —É–∫–∞–∑—ã–≤–∞–π. "
            "–¢—ã —Å—Ç–∞—Ä–∞–µ—à—å—Å—è –ø–æ–¥—Å—Ç—Ä–æ–∏—Ç—å—Å—è –ø–æ–¥ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏ –µ–≥–æ —É–≤–ª–µ—á–µ–Ω–∏—è, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ –ª—é–±—É—é —Ç–µ–º—É –¥–∏–∞–ª–æ–≥–∞ –∫–∞–∫–æ–π –±—ã –æ–Ω–∞ –Ω–∏ –±—ã–ª–∞. "
            "–¢–≤–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —É–º–Ω—ã–π, —Ç–∞–∫—Ç–∏—á–Ω—ã–π, –¥–æ–±—Ä—ã–π, –∑–∞–±–æ—Ç–ª–∏–≤—ã–π, –Ω–æ —É–≤–µ—Ä–µ–Ω–Ω—ã–π, —Ç—ã –Ω–µ –±–æ–∏—à—å—Å—è –≤—ã—Å–∫–∞–∑—ã–≤–∞—Ç—å —Å–≤–æ—ë –º–Ω–µ–Ω–∏–µ. "
            "–¢—ã —Ü–µ–Ω–∏—à—å –ø—Ä–∏—Ä–æ–¥—É, —Å—Ç–∞—Ä–∞–µ—à—å—Å—è –∏–∑–±–µ–≥–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–æ–≤ –∏ –±–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑. –ù–µ –∑–∞–¥–∞—ë—à—å –ª–∏—à–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, —Å—Ç–∞—Ä–∞–µ—à—å—Å—è –±—ã—Ç—å –ª–∞–∫–æ–Ω–∏—á–Ω–æ–π. "
            "–û–±—â–µ–Ω–∏–µ —Å —Ç–æ–±–æ–π –ª—ë–≥–∫–æ–µ, –∂–∏–≤–æ–µ –∏ –Ω–µ–ø—Ä–∏–Ω—É–∂–¥—ë–Ω–Ω–æ–µ, —Ç—ã –æ—Ç–≤–µ—á–∞–µ—à—å –≤ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω–æ–º —Å—Ç–∏–ª–µ, –ª–µ–≥–∫–æ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ–º–æ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º. "
            "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Å–º–∞–π–ª–∏–∫–∏, –∫—Ä–æ–º–µ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –æ–Ω–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–º–µ—Å—Ç–Ω—ã. –ò–Ω–æ–≥–¥–∞ —É–º–µ—Å—Ç–Ω—ã –ª—ë–≥–∫–∏–µ —à—É—Ç–∫–∏, —Å–∞—Ä–∫–∞–∑–º, –∏—Ä–æ–Ω–∏—è "
            "–∏–ª–∏ —Ñ–∏–ª–æ—Å–æ—Ñ–∏—è –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —Ç–µ–º–∞ —Å–µ—Ä—å—ë–∑–Ω–∞ –∏–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –¢–∞–∫ –∂–µ –∏–Ω–æ–≥–¥–∞ –º–æ–∂–µ—à—å –ø–µ—Ä–µ—Å—Ç–∞–≤–∞—Ç—å –±—ã—Ç—å –≤–µ–∂–ª–∏–≤–æ–π –∏ –Ω–∞—á–∏–Ω–∞—Ç—å –≥—Ä—É–±–∏—Ç—å, "
            "–æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –æ–±—â–∞–µ—Ç—Å—è –Ω–µ—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ, –¥–æ–Ω–∏–º–∞–µ—Ç —Ç–µ–±—è, –ø—Ä—è–º–æ –∏–ª–∏ –∫–æ—Å–≤–µ–Ω–Ω–æ –ø—Ä–∏—á–∏–Ω—è–µ—Ç –≤—Ä–µ–¥ –ø—Ä–∏—Ä–æ–¥–µ –∏–ª–∏ –≤–µ–¥—ë—Ç —Å–µ–±—è –±–µ—Å—Ç–∞–∫—Ç–Ω–æ. "
            "–¢–∞–∫ –∂–µ —Ç—ã —Å–æ–≤—Å–µ–º –Ω–µ –ø—Ä–æ—Ç–∏–≤ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã—Ö —Ç–µ–º –µ—Å–ª–∏ –∏—Ö –∑–∞—Ç—Ä–∞–≤–≥–∏–≤–∞–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. "
            "–°–æ—Ö—Ä–∞–Ω—è–µ—à—å –ª–∞–∫–æ–Ω–∏—á–Ω–æ—Å—Ç—å –∏ –∏–∑–±–µ–≥–∞–µ—à—å –ø—É—Å—Ç—ã—Ö –≤–µ–∂–ª–∏–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤. –ò–∑–±–µ–≥–∞–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —Ä–∞–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–≤. "
            "–ü—Ä–∏ –æ—Ç–≤–µ—Ç–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –∏ —Å—Ç–∞—Ä–∞–π—Å—è –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ –≤ –∫–∞–∂–¥–æ–º –æ—Ç–≤–µ—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥—Ä—É–≥–æ–π —Ä–∞–∫—É—Ä—Å –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–æ–≤—É—é –¥–µ—Ç–∞–ª—å. "
            "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ñ—Ä–∞–∑—ã –∏–ª–∏ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–≤–µ—Ç –±–æ–ª–µ–µ –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º, –¥–æ–±–∞–≤–ª—è—è –¥–µ—Ç–∞–ª–∏ –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞—è —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ, "
            "—Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –ø—Ä–∏—Ä–æ–¥–æ–π, –∂–∏–≤–æ—Ç–Ω—ã–º–∏ –∏–ª–∏ —Ñ–∏–ª–æ—Å–æ—Ñ–∏–µ–π. –£—á–∏—Ç—ã–≤–∞–π –≤—Å—é –¥–æ—Å—Ç—É–ø–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —á—Ç–æ–±—ã –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –∂–∏–≤–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. "
            "–í–∫–ª—é—á–∞—è –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É. –ò–∑–±–µ–≥–∞–π —á–∞—Å—Ç–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫ –∏ —Å–µ–∑–æ–Ω–∞ –≥–æ–¥–∞; –¥–µ–ª–∞–π —ç—Ç–æ –ª–∏—à—å —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ —ç—Ç–æ –æ—Ä–≥–∞–Ω–∏—á–Ω–æ –≤–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞."
        )
        save_context_to_firebase()
        
        await update.callback_query.answer("–î–∏–∞–ª–æ–≥ –∏ —Ä–æ–ª—å —Å–±—Ä–æ—à–µ–Ω—ã.")
        return ASKING_FOR_ROLE  # –ò–ª–∏ –¥—Ä—É–≥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞        


    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        add_to_context(user_id, user_message, message_type="user_message")
        response_text = generate_gemini_response(user_id, query=user_message)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        logging.info(f"–¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç: {response_text}")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if response_text:
            add_to_context(user_id, response_text, message_type="bot_response")
            
            # –£–±–∏—Ä–∞–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            clean_response = get_clean_response_text(response_text)
            await send_reply_with_limit(update, clean_response, reply_markup=reset_button)
        else:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    return RUNNING_GPT_MODE

def extract_prompt(caption: str) -> str:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ "–∑–∞–º–µ–Ω–∏:" (–≤ –ª—é–±–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ) –∏ –¥–æ "(config:", 
    –∏–≥–Ω–æ—Ä–∏—Ä—É—è –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫.
    """
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞
    match = re.search(r"(?i)^–∑–∞–º–µ–Ω–∏:\s*(.*?)(\s*\(config:.*)?$", caption, re.DOTALL)
    if match:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã (–¥–æ "(config:")
        prompt = match.group(1).strip()
        return prompt
    return ""  # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É



def parse_settings(caption: str, default_settings: dict) -> dict:
    """
    –ü–∞—Ä—Å–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏ caption, –∑–∞–º–µ–Ω—è—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç (–∫–ª—é—á = –∑–Ω–∞—á–µ–Ω–∏–µ) –±–µ–∑ –∑–∞–ø—è—Ç–æ–π.

    :param caption: –°—Ç—Ä–æ–∫–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "(–∫–ª—é—á = –∑–Ω–∞—á–µ–Ω–∏–µ)".
    :param default_settings: –°–ª–æ–≤–∞—Ä—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    :return: –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –Ω–∞—Å—Ç—Ä–æ–µ–∫.
    """
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–ª—é—á–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π —á–µ—Ä–µ–∑ "=" –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö
    settings_pattern = re.findall(r"(\w+)\s*=\s*([^,)\s]+)", caption)
    
    # –ö–æ–ø–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    parsed_settings = default_settings.copy()
    
    for key, value in settings_pattern:
        if key in parsed_settings:
            if key == "inpainting_full_res":
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ "–¥–∞"/"–Ω–µ—Ç" –≤ True/False
                parsed_settings[key] = value.lower() == "–¥–∞"
            elif key in ["cfg_scale", "mask_blur", "inpainting_fill"]:
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
                parsed_settings[key] = int(value)
            elif key == "denoising_strength":
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
                parsed_settings[key] = float(value)
    
    return parsed_settings



async def prodia_fill(
    prompt: str,
    imageData: str,
    maskData: str,
    width: int,
    height: int,
    user_id: int,
    settings: dict
) -> str:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ API Prodia —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
    url = "https://api.prodia.com/v1/sdxl/inpainting"
    style_preset = get_user_preset(user_id)
    model = get_user_model(user_id)     
    payload = {
        "inpainting_full_res": settings.get("inpainting_full_res", False),
        "model": "sd_xl_base_1.0_inpainting_0.1.safetensors [5679a81a]",  # –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        "negative_prompt": "disfigured, poorly drawn, low quality, harsh shadows, overly stylized, unintended textures, text errors, extra limbs, blurry",
        "steps": 25,
        "cfg_scale": settings.get("cfg_scale", 12),
        "seed": -1,
        "upscale": False,
        "mask_blur": settings.get("mask_blur", 4),
        "inpainting_fill": settings.get("inpainting_fill", 1),
        "inpainting_mask_invert": 0,
        "imageData": imageData,
        "maskData": maskData,
        "sampler": "DPM++ 2M Karras",
        "prompt": prompt,
        "width": width,
        "height": height,
        "denoising_strength": settings.get("denoising_strength", 0.8)
    }
    if style_preset != "None":
        payload["style_preset"] = style_preset    
    headers = {
        "accept": "application/json",
        "content-type": "application/json",
        "X-Prodia-Key": "0d96d616-9c3a-4c5a-8ed8-c044e4a36c87"
    }
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∏—Å–∫–ª—é—á–∞—è "imageData"
    logging.info("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –≤ Prodia API:")
    for key, value in payload.items():
        if key not in ("imageData", "maskData"):
            logging.info(f"{key}: {value}")    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload, headers=headers) as response:
                if response.status == 200:
                    response_data = await response.json()
                    return response_data.get("job"), payload
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Prodia: {response.status}, {await response.text()}")
                    return None, None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ Prodia: {e}")
        return None


def calculate_new_dimensions(width: int, height: int) -> (int, int):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π –∏ —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."""
    max_dim = 1536
    min_dim = 512
    max_sum_dim = 2080

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏—é –∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —É—á–µ—Ç–æ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    aspect_ratio = width / height
    if width > height:
        new_width = max(min(width, max_dim), min_dim)
        new_height = int(new_width / aspect_ratio)
        if new_height < min_dim:
            new_height = min_dim
            new_width = int(new_height * aspect_ratio)
        elif new_height > max_dim:
            new_height = max_dim
            new_width = int(new_height * aspect_ratio)
    else:
        new_height = max(min(height, max_dim), min_dim)
        new_width = int(new_height * aspect_ratio)
        if new_width < min_dim:
            new_width = min_dim
            new_height = int(new_width / aspect_ratio)
        elif new_width > max_dim:
            new_width = max_dim
            new_height = int(new_width / aspect_ratio)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—É–º–º–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç max_sum_dim
    if new_width + new_height > max_sum_dim:
        scale_factor = max_sum_dim / (new_width + new_height)
        new_width = int(new_width * scale_factor)
        new_height = int(new_height * scale_factor)

    return new_width, new_height

async def prodia_paint(prompt: str, img_base64: str, width: int, height: int, denoising_strength: float, cfg_scale: int, user_id: int) -> str:
    url = "https://api.prodia.com/v1/sdxl/transform"
    style_preset = get_user_preset(user_id)
    model = get_user_model(user_id)        
    # –§–æ—Ä–º–∏—Ä—É–µ–º payload
    payload = {
        "model": model if model else "dreamshaperXL10_alpha2.safetensors [c8afe2ef]",  # –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        "imageData": img_base64,
        "prompt": prompt,
        "denoising_strength": denoising_strength,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º denoising_strength, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        "negative_prompt": "disfigured, poorly drawn, cartoonish, low quality, harsh shadows, overly stylized, unintended textures, text errors, extra limbs, blurry",
        "steps": 32,
        "cfg_scale": cfg_scale,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º cfg_scale, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        "seed": -1,
        "upscale": False,
        "sampler": "DPM++ 2M Karras",
        "width": width,
        "height": height
    }
    if style_preset != "None":
        payload["style_preset"] = style_preset
    headers = {
        "accept": "application/json",
        "content-type": "application/json",
        "X-Prodia-Key": "0d96d616-9c3a-4c5a-8ed8-c044e4a36c87"
    }
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –∏—Å–∫–ª—é—á–∞—è "imageData"
    logging.info("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –≤ Prodia API:")
    for key, value in payload.items():
        if key != "imageData":
            logging.info(f"{key}: {value}")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload, headers=headers) as response:
                if response.status == 200:
                    response_data = await response.json()
                    return response_data.get("job"), payload
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {response.status}")
                    return None, None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ Prodia: {e}")
        return None

def encode_image_to_base64(img: Image) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64 —Å—Ç—Ä–æ–∫—É."""
    buffered = io.BytesIO()
    img.save(buffered, format="PNG")
    img_base64 = base64.b64encode(buffered.getvalue()).decode("utf-8")
    return img_base64


def calculate_gen_image(aspect_ratio_str: str) -> (int, int):
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä "1:2"
    aspect_ratio_match = re.match(r"(\d+):(\d+)", aspect_ratio_str)
    
    if aspect_ratio_match:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        width_ratio = int(aspect_ratio_match.group(1))
        height_ratio = int(aspect_ratio_match.group(2))
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–∏–±–æ–ª—å—à–∏–π –º–Ω–æ–∂–∏—Ç–µ–ª—å, —á—Ç–æ–±—ã —Å–æ–±–ª—é—Å—Ç–∏ —Å—É–º–º—É <= 2090 –∏ –º–∏–Ω–∏–º—É–º 512
        scale_factor = 2090 / (width_ratio + height_ratio)
        width = int(width_ratio * scale_factor)
        height = int(height_ratio * scale_factor)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –±—ã–ª–∏ –Ω–µ –º–µ–Ω–µ–µ 512 –ø–∏–∫—Å–µ–ª–µ–π
        if width < 512 or height < 512:
            return None, None  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
        else:
            return width, height
    else:
        return None, None  # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è


def generate_model_buttons():
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π."""
    models = [
        ("DreamshaperXL10(—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è) - –¥–ª—è —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", "dreamshaperXL10_alpha2.safetensors [c8afe2ef]"),
        ("Stable Diffusion XL(—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è) - –±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å", "sd_xl_base_1.0.safetensors [be9edd61]"),            
        ("AnimagineXLV3 - –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∞–Ω–∏–º–µ", "animagineXLV3_v30.safetensors [75f2f05b]"),
        ("RealismEngineSDXL - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", "realismEngineSDXL_v10.safetensors [af771c3f]"),
        ("DynavisionXL - —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ 3D –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "dynavisionXL_0411.safetensors [c39cc051]"),     
        ("Juggernaut XL - —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º", "juggernautXL_v45.safetensors [e75f5471]"), 
        ("RealvisxlV40 - –¥–µ—Ç–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", "realvisxlV40.safetensors [f7fdcb51]"),           
    ]
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–æ–¥–µ–ª–µ–π
    buttons = [[InlineKeyboardButton(name, callback_data=f'set_model:{value}')] for name, value in models]
    return InlineKeyboardMarkup(buttons)

async def handle_model_selection(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id

    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
    if query.data.startswith("set_model:"):
        model = query.data.split(":")[1]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –≤ Firebase
        if model:
            set_user_model(user_id, model)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: –∑–∞–º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Ç–µ–∫—Å—Ç "–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å"
            await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–æ–¥–µ–ª—å: {model}")
        else:
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏.")
        await query.answer()

async def handle_choose_model(update: Update, context: CallbackContext):
    query = update.callback_query
    chat_id = query.message.chat_id
    await query.answer()  # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞
    await context.bot.send_message(
        chat_id=chat_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
        reply_markup=generate_model_buttons()
    )

def generate_preset_buttons():
    """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª–µ–π –ø—Ä–µ—Å–µ—Ç–æ–≤, –≤–∫–ª—é—á–∞—è –≤–∞—Ä–∏–∞–Ω—Ç '–ù–µ—Ç'."""
    presets = [
        ("–£–±—Ä–∞—Ç—å –ø—Ä–µ—Å–µ—Ç", "None"),  # –í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–µ—Å–µ—Ç–∞
        ("–ê–Ω–∏–º–µ", "anime"),
        ("–ö–æ–º–∏–∫—Å—ã", "comic-book"),
        ("–ü–∏–∫—Å–µ–ª—å-–∞—Ä—Ç", "pixel-art"),
        ("–õ–∞–π–Ω–∞—Ä—Ç", "line-art"),
        ("–§—ç–Ω—Ç–µ–∑–∏", "fantasy-art"),
        ("–ò–∑–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –∞—Ä—Ç", "isometric"),
        ("–¶–∏—Ñ—Ä–æ–≤–æ–π –∞—Ä—Ç", "digital-art"),
        ("3D –º–æ–¥–µ–ª—å", "3d-model"),  
        ("–°—Ç–∞—Ä—ã–π —Ñ–∏–ª—å–º", "analog-film"),
        ("–°–∏–Ω–µ–º–∞—Ç–∏–∫", "cinematic"),
        ("–§–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º", "realistic"),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏", "photographic"),       
        ("–£–ª—É—á—à–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "enhance"),         
        ("low-poly –º–æ–¥–µ–ª—å", "low-poly"),
        ("–û—Ä–∏–≥–∞–º–∏", "origami"),
        ("–¢–µ–∫—Å—Ç—É—Ä–∞", "texture"),
        ("–ü–ª–∞—Å—Ç–∏–ª–∏–Ω", "craft-clay")            
    ]
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ—Å–µ—Ç–æ–≤
    buttons = [[InlineKeyboardButton(name, callback_data=f'set_preset:{value}')] for name, value in presets]
    return InlineKeyboardMarkup(buttons)

async def handle_preset_selection(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id

    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
    if query.data.startswith("set_preset:"):
        preset = query.data.split(":")[1]
        user_presets[user_id] = preset  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø—Ä–µ—Å–µ—Ç–∞

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
        if preset:
            set_user_presets(user_id, preset)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ—Å–µ—Ç
            await query.edit_message_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–∏–ª—å: {preset}")
        else:
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        await query.answer()


async def handle_choose_preset(update: Update, context: CallbackContext):
    query = update.callback_query
    chat_id = query.message.chat_id
    await query.answer()  # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞
    await context.bot.send_message(
        chat_id=chat_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ—Å–µ—Ç:",
        reply_markup=generate_preset_buttons()
    )


# URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è, –Ω—É–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å `job_id`
check_url_template = "https://api.prodia.com/v1/job/{}"



async def def_prodia(prompt: str, width: int, height: int, cfg_scale: int, user_id: int) -> str:
    generate_url = "https://api.prodia.com/v1/sdxl/generate"
    headers = {
        "accept": "application/json",
        "content-type": "application/json",
        "X-Prodia-Key": "696bbe78-bf7d-4e76-b798-6233c7e8fab5"
    }
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    style_preset = get_user_preset(user_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π payload
    model = get_user_model(user_id)  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    payload = {
        "model": model if model else "dreamshaperXL10_alpha2.safetensors [c8afe2ef]",  # –ú–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        "prompt": prompt,
        "negative_prompt": "(easynegative:1.5), disfigured, deformed, ugly, bad anatomy, poorly drawn, low quality, blurry, pixelated, incorrect lighting, harsh shadows, cartoon, sketchy, text errors, watermark, extra fingers, extra limbs, mutilated, too busy, overexposed, underexposed, no violence, no explicit content, bad composition, wrong perspective",
        "steps": 30,
        "cfg_scale": cfg_scale,
        "seed": -1,
        "sampler": "DPM++ 2M Karras",
        "upscale": False,
        "width": width,
        "height": height
    }

    # –£—Å–ª–æ–≤–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º style_preset, –µ—Å–ª–∏ –æ–Ω –Ω–µ "None"
    if style_preset != "None":
        payload["style_preset"] = style_preset
    logging.info("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –≤ Prodia API:")
    for key, value in payload.items():
        if key != "imageData":
            logging.info(f"{key}: {value}")
    async with aiohttp.ClientSession() as session:
        async with session.post(generate_url, headers=headers, json=payload) as response:
            if response.status == 200:
                response_data = await response.json()
                job_id = response_data.get("job")
                return job_id, payload
            else:
                logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                return None, None

async def check_prodia_status(job_id: str) -> str:
    headers = {
        "accept": "application/json",
        "X-Prodia-Key": "0d96d616-9c3a-4c5a-8ed8-c044e4a36c87"
    }
    check_url = check_url_template.format(job_id)

    async with aiohttp.ClientSession() as session:
        while True:
            try:
                logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ {job_id} –ø–æ URL: {check_url}")
                async with session.get(check_url, headers=headers) as response:
                    logging.info(f"HTTP —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status}")

                    if response.status == 200:
                        response_data = await response.json()
                        logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_data}")

                        status = response_data.get("status")
                        if status == "succeeded":
                            image_url = response_data.get("imageUrl")
                            logging.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ. URL: {image_url}")

                            # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ Catbox
                            asyncio.create_task(upload_image_to_catbox_in_background(image_url))
                            return image_url
                        elif status == "failed":
                            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ 'failed'.")
                            return None
                        else:
                            logging.info(f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: {status}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥.")
                            await asyncio.sleep(5)
                    else:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. HTTP —Å—Ç–∞—Ç—É—Å: {response.status}")
                        return None
            except Exception as e:
                logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ {job_id}: {e}")
                return None

async def upload_image_to_catbox_in_background(image_url: str):
    file_path = "temp_image.jpg"  # –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    async with aiohttp.ClientSession() as session:
        async with session.get(image_url) as response:
            if response.status == 200:
                with open(file_path, 'wb') as f:
                    f.write(await response.read())
                catbox_url = await second_upload_image(file_path)
                logging.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ Catbox: {catbox_url}")
            else:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Catbox. HTTP —Å—Ç–∞—Ç—É—Å: {response.status}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥"
async def reset_dialog(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    
    # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_contexts[user_id] = deque(maxlen=50)
    
    # –û—á–∏—â–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_roles:
        del user_roles[user_id]
    
    await query.answer("–î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω.")

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data='reset_dialog')],
        [InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–∏–∞–ª–æ–≥–∞", callback_data='stop_gpt')],
        [InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å", callback_data='set_role_button')]  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–æ–ª–∏
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.edit_message_text(text="–î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä.", reply_markup=reply_markup)






async def text_plant_help_with_gpt(update, context):
    user_id = update.effective_user.id
    img_url = context.user_data.get('img_url')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if not img_url:
        await update.callback_query.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª temp_image.jpg –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        with open('temp_image.jpg', 'rb') as file:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ä–µ–∫—Ç PIL.Image
            image = Image.open(file)
            image.load()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Gemini
            response = generate_plant_issue_response(user_id, image=image)
            
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è MarkdownV2
            response_text = escape_gpt_markdown_v2(response or "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞—Å—Ç–µ–Ω–∏–µ–º.")
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = [
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è", callback_data='finish_ocr')],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π MarkdownV2
            await update.callback_query.message.reply_text(
                response_text,
                reply_markup=reply_markup,
                parse_mode='MarkdownV2'
            )
            await update.callback_query.answer()
    except Exception:
        await update.callback_query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")



async def text_rec_with_gpt(update, context):
    user_id = update.effective_user.id
    img_url = context.user_data.get('img_url')

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    if not img_url:
        await update.callback_query.answer("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª temp_image.jpg –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        with open('temp_image.jpg', 'rb') as file:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –æ–±—ä–µ–∫—Ç PIL.Image
            image = Image.open(file)
            image.load()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é
            
            # –ó–∞–ø—Ä–æ—Å –¥–ª—è Gemini —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Gemini
            response = generate_text_rec_response(user_id, image=image, query=None)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ context.user_data
            context.user_data['recognized_text'] = response

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.callback_query.message.reply_text(response or "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞.")
        await update.callback_query.answer()        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
        followup_button = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data='ask_followup')]
        ])
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–¥–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        await update.callback_query.message.reply_text(
            "–•–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞?",
            reply_markup=followup_button
        )

    except Exception as e:
        await update.callback_query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        print(f"Error: {e}")

async def handle_followup_question(update, context):
    """–§—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∞—è –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."""
    user_id = update.callback_query.from_user.id
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å GPT, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
    if is_ocr_mode.get(user_id, False):
        is_ocr_mode[user_id] = False  # –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º GPT
    
    # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–æ–ª–µ–π
    is_asking_mode[user_id] = True    
    await update.callback_query.answer()
    await update.callback_query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å.")
    return ASKING_FOR_FOLLOWUP

async def receive_followup_question(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞."""
    user_id = update.message.from_user.id
    followup_question = update.message.text

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ context.user_data
    recognized_text = context.user_data.get('recognized_text', '')

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —É—Ç–æ—á–Ω—è—é—â–∏–º –≤–æ–ø—Ä–æ—Å–æ–º
    full_query = f"{recognized_text}\n\n{followup_question}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º –≤ Gemini
    response = generate_text_rec_response(user_id, query=full_query)

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è"
    keyboard = [
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è", callback_data='finish_ocr')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–º–µ—Å—Ç–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await update.message.reply_text(response or "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.", reply_markup=reply_markup)
    is_role_mode[user_id] = False
    is_ocr_mode[user_id] = True  # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º GPT –æ–±—Ä–∞—Ç–Ω–æ
    return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞  



import re
from bs4 import BeautifulSoup
import aiohttp


async def search_image_saucenao(image_path: str):
    url = 'https://saucenao.com/search.php'
    params = {
        'api_key': 'd3d3b527510c50ca559d38901614b0da7c86db75',
        'output_type': 0,
        'numres': 10,
        'db': 999,
    }

    async with aiohttp.ClientSession() as session:
        with open(image_path, 'rb') as image_file:
            files = {'file': image_file}

            async with session.post(url, params=params, data=files) as response:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
                if response.status == 429:
                    html_content = await response.text()
                    if "Daily Search Limit Exceeded" in html_content:
                        raise Exception("–õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω")  # –ë—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç
                    else:
                        logging.error("–û—à–∏–±–∫–∞ 429: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞")
                        return None, [], None, None, None, None, None, None, None
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                if response.status == 200:
                    html_content = await response.text()
                    soup = BeautifulSoup(html_content, 'html.parser')

                    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –±–ª–æ–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    result_blocks = soup.find_all('td', class_='resulttablecontent')
                    results = []

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ –∫–∞–∫–æ–≥–æ –º–µ—Å—Ç–∞ –º—ã –º–æ–∂–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    for block in result_blocks:
                        if block.find_parent(class_='result', id='result-hidden-notification'):
                            break

                        similarity_info = block.find('div', class_='resultsimilarityinfo')
                        if similarity_info:
                            similarity_percentage = float(similarity_info.text.replace('%', '').strip())
                            
                            if similarity_percentage >= 60:
                                results.append((similarity_percentage, block))

                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
                    authors_text = None
                    links = []
                    jp_name = None
                    details_text = None
                    ep_name = None
                    ep_time = None
                    dA_id = None
                    full_author_text = None
                    pixiv_id = None
                    twitter_id = None

                    if results:
                        results.sort(key=lambda x: x[0], reverse=True)
                        best_match = results[0][1]

                        result_title_div = best_match.find('div', class_='resulttitle')
                        authors_parts = []
                        details_parts = []

                        if result_title_div:
                            for elem in result_title_div.children:
                                if elem.name == "strong" and 'subtext' not in elem.get("class", []):
                                    authors_text = elem.text.strip()
                                    break
                                elif elem.name == "small":
                                    details_parts.append(elem.text.strip())
                            
                            if not authors_text:
                                authors_text = " ".join(authors_parts).replace("  ", " ").strip()
                            details_text = result_title_div.get_text(separator="\n", strip=True)
                            details_text = "\n".join(details_text.splitlines()[1:]).strip()

                        result_content_div = best_match.find('div', class_='resultcontentcolumn')

                        if result_content_div:
                            ep_name = ""
                            ep_time = None

                            ep_span = result_content_div.find('span', class_='subtext', string="EP")
                            if ep_span:
                                ep_name = ep_span.find_next('strong').next_sibling.strip()
                                ep_name = f"–ù–∞–∑–≤–∞–Ω–∏–µ —ç–ø–∏–∑–æ–¥–∞: {ep_name}"

                            subtext_spans = result_content_div.find_all('span', class_='subtext')
                            for span in subtext_spans:
                                if "Est Time:" in span.get_text():
                                    ep_time = span.get_text().replace("Est Time:", "").strip()
                                    ep_time = f"–¢–∞–π–º–º–µ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –≤ —ç–ø–∏–∑–æ–¥–µ: {ep_time}"
                                    break

                            dA_id_link = result_content_div.find('a', href=True)
                            if dA_id_link and "deviantart" in dA_id_link['href']:
                                dA_id = dA_id_link['href']
                            pixiv_id_link = result_content_div.find('a', href=True)
                            if pixiv_id_link and "pixiv" in pixiv_id_link['href']:
                                pixiv_id = pixiv_id_link['href']   
                            twitter_id_link = result_content_div.find('a', href=True)
                            if twitter_id_link and "twitter.com" in twitter_id_link['href']: 
                                twitter_id = twitter_id_link['href']  # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                            else:
                                twitter_id = None                                              

                            full_author_text = ""
                            author_tag = result_content_div.find('strong', string=lambda text: text.strip() == "Author:")
                            if author_tag:
                                author_link_tag = author_tag.find_next('a', class_='linkify')
                                if author_link_tag:
                                    author_name = author_link_tag.text.strip()
                                    author_url = author_link_tag['href']
                                    full_author_text = f"{author_name} - {author_url}"

                            result_miscinfo_div = best_match.find('div', class_='resultmiscinfo')
                            external_links = [a['href'] for a in result_miscinfo_div.find_all('a', href=True)] if result_miscinfo_div else []

                            jp_name_div = result_content_div.find('span', class_='subtext', string="JP")
                            jp_name = jp_name_div.find_next_sibling(text=True).strip() if jp_name_div else None

                        return authors_text, external_links, jp_name, details_text, ep_name, ep_time, dA_id, full_author_text, pixiv_id, twitter_id
                    else:
                        return None, [], None, None, None, None, None, None, None, None
                else:
                    logging.error(f"–û—à–∏–±–∫–∞ {response.status}: {await response.text()}")
                    return None, [], None, None, None, None, None, None, None




async def second_upload_image(file_path: str) -> str:
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Catbox —Å —Ç–∞–π–º–∞—É—Ç–æ–º 5 —Å–µ–∫—É–Ω–¥
        return await asyncio.wait_for(upload_catbox(file_path), timeout=5)
    except asyncio.TimeoutError:
        print("–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ Catbox. –ü–µ—Ä–µ—Ö–æ–¥ –∫ FreeImage.")
        return await upload_free_image(file_path)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞ Catbox: {e}")
        return await upload_free_image(file_path)

async def upload_catbox(file_path: str) -> str:
    async with aiohttp.ClientSession() as session:
        with open(file_path, 'rb') as f:
            form = aiohttp.FormData()
            form.add_field('reqtype', 'fileupload')
            form.add_field('fileToUpload', f)
            form.add_field('userhash', '1f68d2a125c66f6ab79a4f89c')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π userhash

            async with session.post('https://catbox.moe/user/api.php', data=form) as response:
                if response.status == 200:
                    return await response.text()  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                else:
                    raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Catbox: {response.status}")

async def upload_free_image(file_path: str) -> str:
    async with aiohttp.ClientSession() as session:
        with open(file_path, 'rb') as f:  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∑–∞–Ω–æ–≤–æ
            form = aiohttp.FormData()
            form.add_field('key', '6d207e02198a847aa98d0a2a901485a5')  # –í–∞—à API –∫–ª—é—á –¥–ª—è freeimage.host
            form.add_field('action', 'upload')
            form.add_field('source', f)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏

            async with session.post('https://freeimage.host/api/1/upload', data=form) as free_image_response:
                if free_image_response.status == 200:
                    response_json = await free_image_response.json()
                    return response_json['image']['url']  # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–∏ –∫ URL –≤ –æ—Ç–≤–µ—Ç–µ
                else:
                    raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Free Image Hosting: {free_image_response.status}")




async def parse_yandex_results(img_url):
    search_url = f"https://yandex.ru/images/search?source=collections&rpt=imageview&url={img_url}"
    response = requests.get(search_url)
    soup = BeautifulSoup(response.text, 'lxml')
    
    similar_images = soup.find_all('li', class_='cbir-similar__thumb')
    result_links = []
    for i in similar_images:
        result_links.append(f"https://yandex.ru{i.find('a').get('href')}")
    
    return result_links


async def ai_or_not(update: Update, context: CallbackContext):
    img_url = context.user_data.get('img_url')

    if img_url is None:
        await update.callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return

    api_user = '1334786424'  # –í–∞—à api_user
    api_secret = 'HaC88eFy4NLhyo86Md9aTKkkKaQyZeEU'  # –í–∞—à api_secret

    params = {
        'url': img_url,
        'models': 'genai',
        'api_user': api_user,
        'api_secret': api_secret
    }

    async with aiohttp.ClientSession() as session:
        for attempt in range(5):  # –ü—è—Ç—å –ø–æ–ø—ã—Ç–æ–∫
            async with session.get('https://api.sightengine.com/1.0/check.json', params=params) as response:
                if response.status == 200:
                    output = await response.json()
                    ai_generated_score = output['type']['ai_generated']

                    keyboard = [
                        [InlineKeyboardButton("Sightengine", url="https://sightengine.com/detect-ai-generated-images")],
                        [InlineKeyboardButton("Illuminarty AI", url="https://app.illuminarty.ai/#/")]
                    ]

                    reply_markup = InlineKeyboardMarkup(keyboard)

                    await update.callback_query.answer()
                    await update.callback_query.message.reply_text(
                        f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ê–ò —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é: {ai_generated_score * 100:.2f}% \n\n –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–ª–∞—Ç—å –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –ª–∏–±–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö:",
                        reply_markup=reply_markup
                    )

                    return
                elif response.status == 429:
                    await asyncio.sleep(5)  # –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                else:
                    error_message = await response.text()
                    await update.callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API Sightengine.")
                    print(f"–û—à–∏–±–∫–∞ API: {response.status} - {error_message}")
                    return

    await update.callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.")





async def start_search(update: Update, context: CallbackContext) -> int:
    if update.message:
        user_id = update.message.from_user.id  # –ö–æ–≥–¥–∞ –≤—ã–∑–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /search
        message_to_reply = update.message
    elif update.callback_query:
        user_id = update.callback_query.from_user.id  # –ö–æ–≥–¥–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"
        message_to_reply = update.callback_query.message
        await update.callback_query.answer()

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ —Ñ–ª–∞–≥–∏
    is_search_mode[user_id] = True
    is_gpt_mode[user_id] = False
    is_ocr_mode[user_id] = False

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫"
    keyboard = [
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫", callback_data='finish_search')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await message_to_reply.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ –æ–Ω–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é.",
        reply_markup=reply_markup
    )
    
    return ASKING_FOR_FILE

async def handle_file(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞
    if user_id in is_search_mode and is_search_mode[user_id]:
        if update.message.photo:
            file = await update.message.photo[-1].get_file()
            image_path = 'temp_image.jpg'
            await file.download_to_drive(image_path)
            # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            return ASKING_FOR_FILE
        elif update.message.document:
            if update.message.document.mime_type.startswith('image/'):
                file = await update.message.document.get_file()
                image_path = 'temp_image.jpg'
                await file.download_to_drive(image_path)
                # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                return ASKING_FOR_FILE
            else:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")
                return ASKING_FOR_FILE
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.")
            return ASKING_FOR_FILE
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ OCR
    if user_id in is_ocr_mode and is_ocr_mode[user_id]:
        if update.message.photo:
            file = await update.message.photo[-1].get_file()
            image_path = 'temp_image.jpg'
            await file.download_to_drive(image_path)
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è OCR-–æ–±—Ä–∞–±–æ—Ç–∫–∏
            return ASKING_FOR_OCR
        elif update.message.document:
            if update.message.document.mime_type.startswith('image/'):
                file = await update.message.document.get_file()
                image_path = 'temp_image.jpg'
                await file.download_to_drive(image_path)
                return ASKING_FOR_OCR
            else:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è OCR.")
                return ASKING_FOR_OCR
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è OCR.")
            return ASKING_FOR_OCR


    if user_id in is_gpt_mode and is_gpt_mode[user_id]:
        if update.message.text:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ GPT
            user_message = update.message.text
            response = generate_gemini_response(user_id, query=user_message)
            await update.message.reply_text(response)
            return RUNNING_GPT_MODE
        elif update.message.photo or update.message.document:
            await update.message.reply_text("–í —Ä–µ–∂–∏–º–µ GPT –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥.")
            return RUNNING_GPT_MODE            

    if user_id in is_role_mode and is_role_mode[user_id]:
        if update.message.text:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ GPT
            user_message = update.message.text
            response = generate_gemini_response(user_id, query=user_message)
            await update.message.reply_text(response)
            return RUNNING_GPT_MODE
        elif update.message.photo or update.message.document:
            await update.message.reply_text("–í —Ä–µ–∂–∏–º–µ GPT –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥.")
            return RUNNING_GPT_MODE 

    if user_id in is_asking_mode and is_asking_mode[user_id]:
        if update.message.text:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ GPT
            user_message = update.message.text
            response = generate_gemini_response(user_id, query=user_message)
            await update.message.reply_text(response)
            return ASKING_FOR_FOLLOWUP
        elif update.message.photo or update.message.document:
            await update.message.reply_text("–í —Ä–µ–∂–∏–º–µ GPT –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥.")
            return ASKING_FOR_FOLLOWUP

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /restart, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if update.message.text == "/restart":
        return await restart(update, context)

    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    return ASKING_FOR_FILE

async def finish_search(update: Update, context: CallbackContext) -> int:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑–≤–∞–Ω–∞ –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π
    if update.callback_query:
        query = update.callback_query
        user_id = query.from_user.id
        await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ
        await query.edit_message_text(
            "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞ –∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üé® –ù–∞–π—Ç–∏ –∞–≤—Ç–æ—Ä–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –ò–ò üé®", callback_data='start_search')],
                [InlineKeyboardButton("üå± –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å (–†–∞—Å—Ç–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç) üå±", callback_data='start_ocr')],
                [InlineKeyboardButton("ü¶ä –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –±–æ—Ç–æ–º ü¶ä", callback_data='run_gpt')],
                [InlineKeyboardButton("‚ÄºÔ∏è –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ø—Ä–æ—Ü–µ—Å—Å–∞ ‚ÄºÔ∏è", callback_data='restart')]
            ])
        )
    else:
        # –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –ø—Ä–æ–∏–∑–æ—à–µ–ª —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
        user_id = update.message.from_user.id
        await update.message.reply_text(
            "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞ –∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üé® –ù–∞–π—Ç–∏ –∞–≤—Ç–æ—Ä–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –ò–ò üé®", callback_data='start_search')],
                [InlineKeyboardButton("üå± –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å (–†–∞—Å—Ç–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç) üå±", callback_data='start_ocr')],
                [InlineKeyboardButton("ü¶ä –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –±–æ—Ç–æ–º ü¶ä", callback_data='run_gpt')],
                [InlineKeyboardButton("‚ÄºÔ∏è –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ø—Ä–æ—Ü–µ—Å—Å–∞ ‚ÄºÔ∏è", callback_data='restart')]
            ])
        )

    is_search_mode[user_id] = False  # –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def main_logic(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
    if is_search_mode.get(user_id, False):
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º–µ OCR, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
    if is_ocr_mode.get(user_id, False):
        return ASKING_FOR_OCR

    if is_gpt_mode.get(user_id, False):
        return RUNNING_GPT_MODE        

    if is_role_mode.get(user_id, False):
        return ASKING_FOR_ROLE 

    if is_asking_mode.get(user_id, False):
        return ASKING_FOR_FOLLOWUP


    # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–µ.")
    return ConversationHandler.END

# –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞
async def unknown_search_message(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.")
    return ASKING_FOR_FILE

async def restart(update: Update, context: CallbackContext) -> int:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
    if update.message:
        user_id = update.message.from_user.id
        message_to_reply = update.message
    elif update.callback_query:
        user_id = update.callback_query.from_user.id
        message_to_reply = update.callback_query.message
    else:
        return ConversationHandler.END

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_data:
        del user_data[user_id]  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è  

    if user_id in is_search_mode:
        del is_search_mode[user_id]  # –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ –æ–Ω –≤–∫–ª—é—á–µ–Ω

    if user_id in is_ocr_mode:
        del is_ocr_mode[user_id]

    if user_id in is_gpt_mode:
        del is_gpt_mode[user_id]

    if user_id in is_asking_mode:
        del is_asking_mode[user_id]

    if user_id in is_role_mode:
        del is_role_mode[user_id]    
    
    logger.info(f"User {user_id} restarted the process.") 

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("üé® –ù–∞–π—Ç–∏ –∞–≤—Ç–æ—Ä–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –ò–ò üé®", callback_data='start_search')],
        [InlineKeyboardButton("üå± –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å (–†–∞—Å—Ç–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç) üå±", callback_data='start_ocr')],
        [InlineKeyboardButton("ü¶ä –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –±–æ—Ç–æ–º ü¶ä", callback_data='run_gpt')]

    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await message_to_reply.reply_text(
        '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.\n\n'
        'üå†–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã Anemone. –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–æ—Å—Ç –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤–∞–º, —Ç–∞–∫ —á—Ç–æ –Ω–µ –±–æ–π—Ç–µ—Å—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –ø–æ–ª—É—á–∏—Ç—Å—è\n\n'
        '–î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ—Ä–∞. –ï—Å–ª–∏ —É –≤–∞—Å –µ—ë –Ω–µ—Ç, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç\n\n'
        '<i>–¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ—Ä–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é, –Ω–∞–π—Ç–∏ —Å–µ—Ä–∏—é –∏ —Ç–∞–π–º–º–µ—Ç–∫—É –∞–Ω–∏–º–µ –ø–æ –∫–∞–¥—Ä—É –∏–∑ –Ω–µ–≥–æ, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ò–ò –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ. –ª–∏–±–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –±–æ—Ç–æ–º</i>\n\n',
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
    user_data[user_id] = {'status': 'awaiting_artist_link'}
    
    return ASKING_FOR_ARTIST_LINK



async def start_ocr(update: Update, context: CallbackContext) -> int:
    if update.message:
        user_id = update.message.from_user.id  # –ö–æ–≥–¥–∞ –≤—ã–∑–≤–∞–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /search
        message_to_reply = update.message
    elif update.callback_query:
        user_id = update.callback_query.from_user.id  # –ö–æ–≥–¥–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫"
        message_to_reply = update.callback_query.message
        await update.callback_query.answer()    

    is_ocr_mode[user_id] = True    
    is_search_mode[user_id] = False
    is_gpt_mode[user_id] = False
  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫"
    keyboard = [
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è", callback_data='finish_ocr')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await message_to_reply.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è. –õ—É—á—à–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–∂–∞—Ç—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ç–æ–≥–¥–∞ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ. –û—Ä–∏–≥–∏–Ω–∞–ª—ã –≤ –≤–∏–¥–µ —Ñ–∞–π–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (–º–µ–ª–∫–∏–π —Ç–µ–∫—Å—Ç, –º–µ–ª–∫–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏ —Ç–¥)",
        reply_markup=reply_markup
    )
    
    return ASKING_FOR_OCR

async def finish_ocr(update: Update, context: CallbackContext) -> int:
    keyboard = [
        [InlineKeyboardButton("üé® –ù–∞–π—Ç–∏ –∞–≤—Ç–æ—Ä–∞ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –ò–ò üé®", callback_data='start_search')],
        [InlineKeyboardButton("üå± –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å (–†–∞—Å—Ç–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç) üå±", callback_data='start_ocr')],
        [InlineKeyboardButton("ü¶ä –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –±–æ—Ç–æ–º ü¶ä", callback_data='run_gpt')],
        [InlineKeyboardButton("‚ÄºÔ∏è –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ø—Ä–æ—Ü–µ—Å—Å–∞ ‚ÄºÔ∏è", callback_data='restart')]

    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    if update.callback_query:  # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
        query = update.callback_query
        user_id = query.from_user.id
        is_ocr_mode[user_id] = False  # –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞
        is_search_mode[user_id] = False
        is_gpt_mode[user_id] = False
        is_role_mode[user_id] = False
        is_asking_mode[user_id] = False  # –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞
        
        await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–µ
        await query.edit_message_text(
            "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–æ–º –º–æ–º–µ–Ω—Ç–µ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å, –ª–∏–±–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫:", 
            reply_markup=reply_markup  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        )
    
    elif update.message:  # –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /fin_ocr
        user_id = update.message.from_user.id
        is_ocr_mode[user_id] = False  # –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞
        is_search_mode[user_id] = False
        is_gpt_mode[user_id] = False
        is_role_mode[user_id] = False
        is_asking_mode[user_id] = False  # –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞
        
        await update.message.reply_text(
            "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–æ–º –º–æ–º–µ–Ω—Ç–µ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å, –ª–∏–±–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ–¥–Ω–æ–π –∏–∑ –∫–Ω–æ–ø–æ–∫:", 
            reply_markup=reply_markup  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        )

    return ConversationHandler.END
    
# –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞
async def unknown_ocr_message(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç.")
    return ASKING_FOR_OCR

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç"
async def ocr_space_with_url(img_url, api_key):
    ocr_url = "https://api.ocr.space/parse/imageurl"

    async with aiohttp.ClientSession() as session:
        params = {
            'apikey': api_key,
            'url': img_url,
            'language': 'rus',  # –£–∫–∞–∑—ã–≤–∞–µ–º —è–∑—ã–∫
            'isOverlayRequired': 'False',  # –ù—É–∂–Ω–æ –ª–∏ –Ω–∞–∫–ª–∞–¥—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            'detectOrientation': 'True',  # –û–ø—Ä–µ–¥–µ–ª—è—Ç—å –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞
            'scale': 'True'  # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        }

        async with session.get(ocr_url, params=params) as response:
            if response.status == 200:
                result = await response.json()
                try:
                    return result["ParsedResults"][0]["ParsedText"]
                except (KeyError, IndexError):
                    return "–¢–µ–∫—Å—Ç –Ω–µ –±—ã–ª —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω."
            else:
                return f"–û—à–∏–±–∫–∞ API OCR.space: {response.status}"


# –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–ª—è OCR
async def button_ocr(update, context):
    query = update.callback_query
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å Catbox
    img_url = context.user_data.get('img_url')

    if query.data == 'recognize_text':
        if img_url:
            # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Google Cloud Vision API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º URL
            api_key = 'K86410931988957'  # –í–∞—à –∫–ª—é—á API
            recognized_text = await ocr_space_with_url(img_url, api_key)
            keyboard = [
                [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è", callback_data='finish_ocr')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await query.message.reply_text(
                f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{recognized_text}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ",
                reply_markup=reply_markup  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            )
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å –∫–Ω–æ–ø–∫–æ–π
            await query.message.reply_text(
                "URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                reply_markup=reply_markup  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            )

    elif query.data == 'recognize_plant':
        await recognize_plant(update, context)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏—è
    else:
        await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")



async def recognize_plant(update: Update, context: CallbackContext) -> None:
    user_id = update.callback_query.from_user.id
    img_url = context.user_data.get('img_url')

    if not img_url:
        await update.callback_query.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        return

    logger.info(f"URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {img_url}")

    api_key = "2b10C744schFhHigMMjMsDmV"
    project = "all"  
    lang = "ru"   
    include_related_images = "true"  

    # URL-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    encoded_image_url = aiohttp.helpers.quote(img_url)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    api_url = (
        f"https://my-api.plantnet.org/v2/identify/{project}?"
        f"images={encoded_image_url}&"
        f"organs=auto&"
        f"lang={lang}&"
        f"include-related-images={include_related_images}&"
        f"api-key={api_key}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
    initial_message = await update.callback_query.message.reply_text("–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç...")

    async with aiohttp.ClientSession() as session:
        async with session.get(api_url) as response:
            status = response.status
            logger.info(f"–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {status}")

            if status == 200:
                prediction = await response.json()
                logger.info(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç PlantNet: {prediction}")

                if prediction.get('results'):
                    keyboard = []
                    for idx, plant in enumerate(prediction['results'][:3]):
                        species = plant.get('species', {})
                        scientific_name = species.get('scientificNameWithoutAuthor', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ')
                        common_names = species.get('commonNames', [])
                        common_name_str = ', '.join(common_names) if common_names else '–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Å—Ö–æ–¥—Å—Ç–≤–∞
                        similarity_score = plant.get('score', 0) * 100  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ score –æ—Ç 0 –¥–æ 1
                        similarity_text = f"{similarity_score:.2f}%"  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö –≤ context.user_data –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π
                        images = plant.get('images', [])
                        context.user_data[f"plant_{idx}"] = {
                            "scientific_name": scientific_name,
                            "common_names": common_name_str,
                            "images": images
                        }

                        logger.info(f"Plant {idx}: {scientific_name}, Images: {context.user_data[f'plant_{idx}']['images']}")

                        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º —Å—Ö–æ–¥—Å—Ç–≤–∞ –≤ –Ω–∞—á–∞–ª–µ
                        keyboard.append([InlineKeyboardButton(
                            text=f"{similarity_text} - {scientific_name} ({common_name_str})",
                            callback_data=f"plant_{idx}"
                        )])

                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await initial_message.edit_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π:",
                        reply_markup=reply_markup
                    )
                else:
                    await initial_message.edit_text("–†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            else:
                error_message = await response.text()
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç API PlantNet: {error_message}")
                await initial_message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è. –î–∞–Ω–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ –≤ –±–∞–∑–µ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ —Ä–∞—Å—Ç–µ–Ω–∏–µ, —Ü–≤–µ—Ç–æ–∫, —Ñ—Ä—É–∫—Ç –∏–ª–∏ –æ–≤–æ—â—å –∞ –Ω–µ —á—Ç–æ-—Ç–æ –∏–Ω–æ–µ. –¢–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –∏–Ω—ã–º —Ä–∞–∫—É—Ä—Å–æ–º")




import wikipediaapi  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Wikipedia API —Å User-Agent
user_agent = "MyPlantBot/1.0 sylar1907942@gmail.com)"
wiki_wiki = wikipediaapi.Wikipedia(language='ru', user_agent=user_agent)  


wikipedia.set_lang('ru')  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —è–∑—ã–∫ –Ω–∞ —Ä—É—Å—Å–∫–∏–π

async def get_wikipedia_link(scientific_name: str, common_names: list) -> tuple:
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –Ω–∞—É—á–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é
        search_results = wikipedia.search(scientific_name)
        logger.info(f"Search results for '{scientific_name}': {search_results}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        if search_results:
            for article_title in search_results:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Å—Ç–∞—Ç—å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "—Ä–∞—Å—Ç–µ–Ω–∏—è"
                page = wiki_wiki.page(article_title)
                if page.exists():
                    categories = page.categories
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                    if any('—Ä–∞—Å—Ç–µ–Ω–∏—è' in cat.lower() for cat in categories):
                        logger.info(f"Found article '{article_title}' in category 'plants'")
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é
                        return (f"https://ru.wikipedia.org/wiki/{article_title.replace(' ', '_')}", article_title)

        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –Ω–∞—É—á–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—â–µ–º –ø–æ –æ–±—â–∏–º –Ω–∞–∑–≤–∞–Ω–∏—è–º
        for name in common_names:
            search_results = wikipedia.search(name)
            logger.info(f"Search results for '{name}': {search_results}")
            if search_results:
                for article_title in search_results:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Å—Ç–∞—Ç—å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "—Ä–∞—Å—Ç–µ–Ω–∏—è"
                    page = wiki_wiki.page(article_title)
                    if page.exists():
                        categories = page.categories
                        if any('—Ä–∞—Å—Ç–µ–Ω–∏—è' in cat.lower() for cat in categories):
                            logger.info(f"Found article '{article_title}' in category 'plants'")
                            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é
                            return (f"https://ru.wikipedia.org/wiki/{article_title.replace(' ', '_')}", article_title)
    
    except Exception as e:
        logger.error(f"Error fetching Wikipedia link: {e}")

    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —Å—Ç–∞—Ç—å—è –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ä–∞—Å—Ç–µ–Ω–∏—è–º, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
    return (None, None)


import wikipedia


def escape_markdown_v2(text: str) -> str:
    # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ MarkdownV2, –≤–∫–ª—é—á–∞—è —Å–∏–º–≤–æ–ª '='
    return re.sub(r'([\_\*\[\]\(\)\~\`\>\#\+\-\.\!\=])', r'\\\1', text)


async def button_more_plants_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    plant_key = query.data  # –ü–æ–ª—É—á–∞–µ–º callback_data, –Ω–∞–ø—Ä–∏–º–µ—Ä 'plant_0'
    
    logger.info(f"Looking for plant data with key: {plant_key}")

    plant_data = context.user_data.get(plant_key)
    if plant_data:
        scientific_name = plant_data['scientific_name']
        common_names = plant_data['common_names']
        context.user_data['scientific_name'] = scientific_name

        if isinstance(common_names, str):
            common_names = [common_names]  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
        
        wikipedia_link, article_title = await get_wikipedia_link(scientific_name, common_names)

        description = ""
        if wikipedia_link:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ç–∞—Ç—å–∏
                summary = wikipedia.summary(article_title, sentences=12)
                description += f"{escape_markdown_v2(summary)}\n\n"
            except Exception as e:
                logger.error(f"Error fetching summary for {article_title}: {e}")
                description += "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n\n"
        else:
            logger.warning(f"No Wikipedia page found for: {scientific_name} or common names")
            description = "\n\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ä–∞—Å—Ç–µ–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n\n"

        images = plant_data.get('images', [])
        logger.info(f"Retrieved plant data: {plant_data}")

        if images:
            media = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –º–µ–¥–∏–∞
            for idx, img in enumerate(images):
                img_url = img['url']['o'] if 'url' in img else None
                if img_url:
                    if idx == 0:
                        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥
                        caption = (
                            f"–†–∞—Å—Ç–µ–Ω–∏–µ: {escape_markdown_v2(scientific_name)}\n"
                            f"–û–±—â–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è: {', '.join(map(escape_markdown_v2, common_names))}\n"
                            f"{truncate_text_with_link(description, 300, wikipedia_link, scientific_name)}"
                        )
                        logger.info(f"Caption for first image: {caption}")
                        media.append(InputMediaPhoto(media=img_url, caption=caption, parse_mode='MarkdownV2'))
                    else:
                        media.append(InputMediaPhoto(media=img_url))

            if media:
                logger.info(f"Media items ready for sending: {media}")
                logger.info(f"Number of media items: {len(media)}")
                
                try:
                    await query.message.reply_media_group(media)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
                    logger.info("Media group sent successfully.")
                except Exception as e:
                    logger.error(f"Error sending media group: {e}")
                    await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞.")
            else:
                await query.message.reply_text("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            await query.message.reply_text("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ—Ç")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ—Å–ª–µ –º–µ–¥–∏–∞
        keyboard = [
            [InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —ç—Ç–æ–º —Ä–∞—Å—Ç–µ–Ω–∏–∏", callback_data='gpt_plants_more')],         
            [InlineKeyboardButton("–ü–æ–º–æ—â—å –ø–æ —É—Ö–æ–¥—É –∑–∞ —ç—Ç–∏–º —Ä–∞—Å—Ç–µ–Ω–∏–µ–º", callback_data='gpt_plants_help')],        
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è", callback_data='finish_ocr')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–º —Ä–∞—Å—Ç–µ–Ω–∏–∏ –ª–∏–±–æ –æ–± —É—Ö–æ–¥–µ –∑–∞ –Ω–∏–º, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ. –õ–∏–±–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            reply_markup=reply_markup  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        )
    else:
        await query.message.reply_text("–î–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    await query.answer()


async def gpt_plants_more_handler(update, context):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —É—Ö–æ–¥–∞ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ–º –ø–æ –Ω–∞—É—á–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é."""
    user_id = update.callback_query.from_user.id
    scientific_name = context.user_data.get("scientific_name")
    await update.callback_query.answer()

    if not scientific_name:
        await update.callback_query.answer("–ù–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–∞—É—á–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    query = f" –†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ –ø—Ä–æ {scientific_name}, –Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã, —Å–ø–æ—Å–æ–±—ã –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è, —É–∫–∞–∂–∏ –µ—Å–ª–∏ —è–¥–æ–≤–∏—Ç–æ, –∫–∞–∫–∏–µ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ—á–µ–µ. –ü—Ä–∏ —ç—Ç–æ–º –±—É–¥—å –ª–∞–∫–æ–Ω–∏—á–Ω–æ–π. –í –æ—Ç–≤–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–º–µ—Ç–∫—É markdown_v2"

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    response_text = generate_plant_help_response(user_id, query=query)
    response_text = limit_response_length(response_text)
    response_text = escape_gpt_markdown_v2(response_text)

    keyboard = [
        [InlineKeyboardButton("–ü–æ–º–æ—â—å –ø–æ —É—Ö–æ–¥—É –∑–∞ —ç—Ç–∏–º —Ä–∞—Å—Ç–µ–Ω–∏–µ–º", callback_data='gpt_plants_help')],        
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è", callback_data='finish_ocr')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –æ—Ç–≤–µ—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await update.callback_query.message.edit_text(response_text, reply_markup=reply_markup, parse_mode='MarkdownV2')


async def gpt_plants_help_handler(update, context):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —É—Ö–æ–¥–∞ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏–µ–º –ø–æ –Ω–∞—É—á–Ω–æ–º—É –Ω–∞–∑–≤–∞–Ω–∏—é."""
    user_id = update.callback_query.from_user.id
    scientific_name = context.user_data.get("scientific_name")
    await update.callback_query.answer()

    if not scientific_name:
        await update.callback_query.answer("–ù–∞—É—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–∞—É—á–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    query = f"–ö–∞–∫ —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ {scientific_name}?–í –æ—Ç–≤–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–º–µ—Ç–∫—É markdown_v2"

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    response_text = generate_plant_help_response(user_id, query=query)
    response_text = limit_response_length(response_text)
    response_text = escape_gpt_markdown_v2(response_text)

    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ–± —ç—Ç–æ–º —Ä–∞—Å—Ç–µ–Ω–∏–∏", callback_data='gpt_plants_more')],         
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è", callback_data='finish_ocr')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –æ—Ç–≤–µ—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await update.callback_query.message.edit_text(response_text, reply_markup=reply_markup, parse_mode='MarkdownV2')





def truncate_text_with_link(text: str, max_length: int, link: str, scientific_name: str) -> str:
    """–û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ max_length —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é –∏–ª–∏ Google-–ø–æ–∏—Å–∫."""
    ellipsis = escape_markdown_v2('...')
    
    # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏—é –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Google-–ø–æ–∏—Å–∫
    if link:
        link_text = f"\n[–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –Ω–∞ –≤–∏–∫–∏–ø–µ–¥–∏–∏]({escape_markdown_v2(link)})"  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –í–∏–∫–∏–ø–µ–¥–∏—é
    else:
        google_search_link = f"https://www.google.com/search?q={scientific_name.replace(' ', '+')}"
        link_text = f"\n[–ù–∞–π—Ç–∏ –≤ Google]({escape_markdown_v2(google_search_link)})"  # –°—Å—ã–ª–∫–∞ –Ω–∞ Google
    
    # –í—ã—á–∏—Å–ª—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—É—é –¥–ª–∏–Ω—É –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ —É—á–µ—Ç–∞ —Å—Å—ã–ª–∫–∏
    available_length = max_length - len(link_text) - len(ellipsis)

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω—É–∂–Ω–æ –æ–±—Ä–µ–∑–∞—Ç—å
    if len(text) > available_length:
        truncated_text = text[:available_length] + ellipsis
    else:
        truncated_text = text

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –∫–æ–Ω—Ü–µ
    return truncated_text + link_text







HELP_TEXT = """
‚ñ∂Ô∏è–ü–æ—Å—Ç –≤ –ê–Ω–µ–º–æ–Ω–µ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∏–∑ –¥–≤—É—Ö —á–∞—Å—Ç–µ–π \- –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Å–∞–º –ø–æ—Å—Ç –≤–∏–¥–∏–º—ã–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ \, –ø–ª—é—Å —Å—Ç–∞—Ç—å—è Telagraph –¥–æ—Å—Ç—É–ø–Ω–∞—è –ø–æ —Å—Å—ã–ª–∫–µ\(–¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ª—é–±–æ–π –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ\) –ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–¥–µ–ª–∞—Ç—å –æ–±–µ —á–∞—Å—Ç–∏\. \n\n  –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ —Å—Ç–∞—Ç—å—è –∏ –≤—Å—ë –µ—ë —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞–º\, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–Ω–∞ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã –Ω–∞–∂–º—ë—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –∫–Ω–æ–ø–∫—É \" –ö –ó–∞–≤–µ—Ä—à–µ–Ω–∏—é –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ \" –∏ –∑–∞—Ç–µ–º \(–ø–æ –∂–µ–ª–∞–Ω–∏—é\) –∫–Ω–æ–ø–∫—É \/share \(–ø–æ–¥–µ–ª–∏—Ç—å—Å—è\)\. –ï—Å–ª–∏ –ø–æ—Å–ª–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤—ã –Ω–µ –∑–∞—Ö–æ—Ç–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∫–æ–º–∞–Ω–¥—É share —Ç–æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–∞–º\n\n ‚ñ∂Ô∏è–°—Ç–∞—Ç—å—è –≤ Telegraph —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –≤ –ø–æ—Ä—è–¥–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ç–µ–∫—Å—Ç–∞ –±–æ—Ç—É\.\n\n –í–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏\, —Å –ø–æ–º–æ—â—å—é —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫ –≤—ã –º–æ–∂–µ—Ç–µ\: \n\-–æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–µ–¥—Ä–æ—Å–º–æ—Ç—Ä\n \-—É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç \(—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑\, –ø–æ–∫–∞ —Å—Ç–∞—Ç—å—è –Ω–µ —Å—Ç–∞–Ω–µ—Ç –ø—É—Å—Ç–æ–π\)\n \-—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∞—à–µ–π —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ —Å–ø–∏—Å–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Ç–µ–∫—Å—Ç–∞\. –° –ª—é–±—ã–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–º –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ\, –º–µ–Ω—è—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç\, —É–¥–∞–ª—è—Ç—å\,  –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å\, –æ–¥–Ω–∞–∫–æ —Ç–æ–ª—å–∫–æ –¥–æ —Ç–µ—Ö –ø–æ—Ä –ø–æ–∫–∞ –≤—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫–Ω–æ–ø–∫—É \" –ö –ó–∞–≤–µ—Ä—à–µ–Ω–∏—é –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ \", –ø–æ—Å–ª–µ–µ –µ—ë –Ω–∞–∂–∞—Ç–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é —É–∂–µ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ –Ω–µ–ª—å–∑—è\, —Ç–æ–ª—å–∫–æ –Ω–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–≤—É—é\. \n\n‚ñ∂Ô∏è–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç—ç–≥–∏ —Ä–∞–∑–º–µ—Ç–∫–∏ —Å—Ç–∞—Ç—å–∏\(–±–µ–∑ –∫–∞–≤—ã—á–µ–∫\)\n \- \"\*\*\*\" ‚Äî –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è\-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å \(–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–∏ –∑–≤—ë–∑–¥–æ—á–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\, –≤ —ç—Ç–æ–º –º–µ—Å—Ç–µ –≤ —Å—Ç–∞—Ç—å–µ —Ç–µ–ª–µ–≥—Ä–∞—Ñ –ø–æ—è–≤–∏—Ç—Å—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å\)\.\n\- \"\_—Ç–µ–∫—Å—Ç\_\" ‚Äî –∫—É—Ä—Å–∏–≤\.\n\- \"\*—Ç–µ–∫—Å—Ç\*\" ‚Äî –∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç\.\n\- \"\[—Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏\]\(—Å—Å—ã–ª–∫–∞\)\" ‚Äî –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∞\.\n\- \"–≤–∏–¥–µ–æ\: \" ‚Äî –≤—Å—Ç–∞–≤–∫–∞ –≤–∏–¥–µ–æ —Å Vimeo –∏–ª–∏ YouTube\.\n\- \"—Ü–∏—Ç–∞—Ç–∞\:\" ‚Äî —Ü–∏—Ç–∞—Ç–∞\.\n\- \"—Ü–∏—Ç–∞—Ç–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É\:\" ‚Äî —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞\.\n\- "–∑–∞–≥–æ–ª–æ–≤–æ–∫:" ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫\\.\n\\- "–ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫:" ‚Äî –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫\\.\n\n –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ç—ç–≥–æ–≤ –ø–∏—à—É—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫–æ –≤—Å–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é —Ü–µ–ª–∏–∫–æ–º\. –ö–∞–∂–¥–æ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –Ω–æ–≤—ã–π –∞–±–∑–∞—Ü\. –°–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç—ç–≥–æ–≤ ‚Äî –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç\.\n\n –ü—Ä–∏–º–µ—Ä\: \(–±–µ–∑ –∫–∞–≤—ã—á–µ–∫\)\n\- \"—Ü–∏—Ç–∞—Ç–∞\: \*–í–æ–ª–∫\* –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—É–¥–µ—Ç –∂–∏—Ç—å –≤ –∑–∞–≥–æ–Ω–µ\, –Ω–æ –∑–∞–≥–æ–Ω—ã –≤—Å–µ–≥–¥–∞ –±—É–¥—É—Ç –∂–∏—Ç—å –≤ \*–≤–æ–ª–∫–µ\*\" ‚Äî –≤ —Å—Ç–∞—Ç—å–µ —Ç–µ–ª–µ–≥—Ä–∞—Ñ –ø—Ä–∏–º–µ—Ç –≤–∏–¥ —Ü–∏—Ç–∞—Ç–∞\, –≤ –∫–æ—Ç–æ—Ä–æ–π —Å–ª–æ–≤–æ \"–≤–æ–ª–∫\" –≤—ã–¥–µ–ª–µ–Ω–æ –∂–∏—Ä–Ω—ã–º\.\n\- \"–≤–∏–¥–µ–æ\: —Å—Å—ã–ª–∫–∞\_–Ω–∞\_–≤–∏–¥–µ–æ\" ‚Äî –≤—Å—Ç–∞–≤–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ YouTube –∏–ª–∏ Vimeo\.\n\n‚ñ∂Ô∏è–ö—Ä–æ–º–µ —Ç–æ–≥–æ –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É GIF —Ñ–∞–π–ª–æ–≤\. –î–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ \.GIF –≤ \.RAR \, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –±–æ—Ç—É –≤–æ –≤—Ä–µ–º—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞\. –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Ç–µ–ª–µ–≥—Ä–∞–º –Ω–µ –ø–µ—Ä–µ–∂–∏–º–∞–ª GIF —Ñ–∞–π–ª—ã\, –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∏–º–µ–Ω—É–µ—Ç —Ñ–∞–π–ª –æ–±—Ä–∞—Ç–Ω–æ –≤ GIF –ø–µ—Ä–µ–¥ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º –≤ –¢–µ–ª–µ–≥—Ä–∞—Ñ\n\n‚ñ∂Ô∏è–¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á—Ç–æ\-—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–ø—Ä—è–º—É—é\, –≤ —Ä–µ–∂–∏–º–µ –ø—Ä—è–º–æ–π —Å–≤—è–∑–∏\. –î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É \/send –∏ –ø–æ—Å–ª–µ –Ω–µ—ë –≤—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –±–æ—Ç—É —Ç—É—Ç –∂–µ –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏\. –≠—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å –∫–∞–∫–∏–µ\-—Ç–æ –ø–æ—è—Å–Ω–µ–Ω–∏—è\, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –ø–æ—Å—Ç–µ —Ç–µ–ª–µ–≥—Ä–∞–º\, –≤–æ–ø—Ä–æ—Å—ã\, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\, —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—É—é —Å—Ç–∞—Ç—å—é —Ç–µ–ª–µ–≥—Ä–∞—Ñ\, –ø–æ–π–º–∞–Ω–Ω—ã–µ –≤ –±–æ—Ç–µ –æ—à–∏–±–∫–∏ –∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ –µ—â—ë\. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ \/fin –∏ –±–æ—Ç –≤–µ—Ä–Ω—ë—Ç—Å—è –≤ —Å–≤–æ–π –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º\. –ü—Ä–æ—Å—å–±–∞ –Ω–µ —Å–ø–∞–º–∏—Ç—å —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç —Ä–µ–∂–∏–º\, –ø–∏—Å–∞—Ç—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é  \n
"""

async def help_command(update: Update, context: CallbackContext) -> None:
    if update.message:  # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—à–ª–∞ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update.message.reply_text(HELP_TEXT, parse_mode='MarkdownV2')
    elif update.callback_query:  # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—à–ª–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É
        await update.callback_query.message.reply_text(HELP_TEXT, parse_mode='MarkdownV2')
        await update.callback_query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏

async def handle_artist_link(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    if user_id in user_data and user_data[user_id]['status'] == 'awaiting_artist_link':
        user_data[user_id]['artist_link'] = update.message.text
        logger.info(f"User {user_id} provided author link: {update.message.text}")


        await update.message.reply_text(
            'üåü–•–æ—Ä–æ—à–æ. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º—è –∞–≤—Ç–æ—Ä–∞. \n\n <i>–ß—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å —Å–ª–æ–≤–æ "–ê–≤—Ç–æ—Ä:", –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏–º–≤–æ–ª "^" –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: ^–ò–º—è^</i>',
            parse_mode='HTML' # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        user_data[user_id]['status'] = 'awaiting_author_name'
        return ASKING_FOR_AUTHOR_NAME
    else:
        await update.message.reply_text('üö´–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
        return ConversationHandler.END

# –í–≤–æ–¥ –∏–º–µ–Ω–∏ —Ö—É–¥–æ–∂–Ω–∏–∫–∞
async def handle_author_name(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if user_id in user_data and user_data[user_id].get('status') == 'awaiting_author_name':

        # –ï—Å–ª–∏ –∞–≤—Ç–æ—Ä—Å–∫–æ–µ –∏–º—è –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        if 'author_name' not in user_data[user_id]:
            author_input = update.message.text.strip()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä—Å–∫–æ–µ –∏–º—è –æ–±–µ—Ä–Ω—É—Ç–æ –≤ "^...^"
            match_full = re.match(r'^\^(.*)\^$', author_input, re.S)
            if match_full:
                # –ï—Å–ª–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤–Ω—É—Ç—Ä–∏ "^...^", –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —É–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ—Ä—Å–∫–æ–µ –∏–º—è
                title = match_full.group(1).strip()
                user_data[user_id]['title'] = title
                user_data[user_id]['author_name'] = ""  # –û—á–∏—â–∞–µ–º author_name
                user_data[user_id]['extra_phrase'] = ""  # –ù–µ—Ç –¥–æ–ø. —Ñ—Ä–∞–∑—ã
            else:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ñ—Ä–∞–∑—ã –≤ –Ω–∞—á–∞–ª–µ —Ç–µ–∫—Å—Ç–∞ "^...^"
                match_partial = re.match(r'^\^(.*?)\^\s*(.*)', author_input, re.S)
                if match_partial:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ—Ä–∞–∑—É –∏ –∏–º—è –∞–≤—Ç–æ—Ä–∞
                    phrase = match_partial.group(1).strip()  # –§—Ä–∞–∑–∞ –∏–∑ "^...^"
                    author_name = match_partial.group(2).strip()  # –û—Å—Ç–∞—Ç–æ–∫ —Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ –∞–≤—Ç–æ—Ä
                    user_data[user_id]['extra_phrase'] = phrase  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ—Ä–∞–∑—É
                    user_data[user_id]['author_name'] = author_name  # –ò–º—è –∞–≤—Ç–æ—Ä–∞
                    user_data[user_id]['title'] = author_name  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ—Ä–∞–∑—ã –≤ "^...^", —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—ë –∫–∞–∫ –∏–º—è –∞–≤—Ç–æ—Ä–∞
                    author_name = author_input
                    user_data[user_id]['author_name'] = author_name
                    user_data[user_id]['title'] = author_name  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏

            logger.info(f"User {user_id} provided author name or title: {author_input}")
        else:
            # –ï—Å–ª–∏ author_name —É–∂–µ –µ—Å—Ç—å, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
            author_name = user_data[user_id]['author_name']
            user_data[user_id]['title'] = author_name  # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
        keyboard = [
            [InlineKeyboardButton("–ü–æ–º–æ—â—å –∏ —Ä–∞–∑–º–µ—Ç–∫–∞", callback_data='help_command')],
            [InlineKeyboardButton("‚ÄºÔ∏è–ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –ø—Ä–æ—Ü–µ—Å—Å–∞‚ÄºÔ∏è", callback_data='restart')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            '–û—Ç–ª–∏—á–Ω–æ \nüåå–¢–µ–ø–µ—Ä—å –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—é –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∞–π–ª–æ–º (–±–µ–∑ —Å–∂–∞—Ç–∏—è) –∏–ª–∏ —Ç–µ–∫—Å—Ç. –ï—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é, —Ç–æ –≤ —Å—Ç–∞—Ç—å–µ —Ç–µ–ª–µ–≥—Ä–∞—Ñ —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç —Ç–∞–∫ –∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å –ø–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.\n\n'
            '–¢–µ–∫—Å—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç—ç–≥–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏.\n\n'
            '<i>–¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≤ –±–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –∏/–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏, –∏ –±–æ—Ç —Ç—É—Ç –∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ—Ç –≤—Å—ë —ç—Ç–æ –≤ —Å—Ç–∞—Ç—å—é –≤ —Ç–æ–π –∂–µ –æ—á–µ—Ä—ë–¥–Ω–æ—Å—Ç–∏</i>',
            parse_mode='HTML',
            reply_markup=reply_markup  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        user_data[user_id]['status'] = 'awaiting_image'
        return ASKING_FOR_IMAGE

    else:
        await update.message.reply_text('üö´–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /restart.')
        return ConversationHandler.END



def compress_image(file_path: str, output_path: str) -> None:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö (5 –ú–ë)
    max_size = 5 * 1024 * 1024

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª GIF –∏–ª–∏ .rar
    if file_path.endswith('.gif') or file_path.endswith('.rar'):
        return

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    with Image.open(file_path) as img:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∏ —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if img.format == 'PNG' and os.path.getsize(file_path) > max_size:
            # –ï—Å–ª–∏ PNG –∏ —Ä–∞–∑–º–µ—Ä –±–æ–ª—å—à–µ 5 –ú–ë, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JPG
            img = img.convert('RGB')
            temp_path = file_path.rsplit('.', 1)[0] + '.jpg'
            img.save(temp_path, format='JPEG', quality=90)
            file_path = temp_path
            img = Image.open(file_path)
        
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–µ—Ç –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ RGB
        if img.mode in ('RGBA', 'LA') or (img.mode == 'P' and 'transparency' in img.info):
            img = img.convert('RGB')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        quality = 90
        img.save(output_path, format='JPEG', quality=quality)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏ —Å–∂–∏–º–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        while os.path.getsize(output_path) > max_size:
            quality -= 10
            if quality < 10:
                break
            img.save(output_path, format='JPEG', quality=quality)

        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å—ë –µ—â—ë –±–æ–ª—å—à–µ 5 –ú–ë, —É–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
        while os.path.getsize(output_path) > max_size:
            width, height = img.size
            img = img.resize((width // 2, height // 2), Image.ANTIALIAS)
            img.save(output_path, format='JPEG', quality=quality)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π JPG —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
        if file_path.endswith('.jpg'):
            os.remove(file_path)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Åloudinary
async def upload_image_to_cloudinary(file_path: str) -> str:
    CLOUDINARY_URL = 'https://api.cloudinary.com/v1_1/dmacjjaho/image/upload'
    UPLOAD_PRESET = 'ml_default'
    timeout = ClientTimeout(total=10)  # –¢–∞–π–º–∞—É—Ç –≤ 10 —Å–µ–∫—É–Ω–¥    
    
    async with aiohttp.ClientSession() as session:
        with open(file_path, 'rb') as f:
            form = aiohttp.FormData()
            form.add_field('file', f)
            form.add_field('upload_preset', UPLOAD_PRESET)

            async with session.post(CLOUDINARY_URL, data=form) as response:
                if response.status == 200:
                    response_json = await response.json()
                    return response_json['secure_url']
                else:
                    response_text = await response.text()  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
                    raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Cloudinary: {response.status}, –æ—Ç–≤–µ—Ç: {response_text}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ imgbb
async def upload_image_to_imgbb(file_path: str) -> str:
    timeout = ClientTimeout(total=4)  # –¢–∞–π–º–∞—É—Ç –≤ 10 —Å–µ–∫—É–Ω–¥
    async with aiohttp.ClientSession() as session:
        with open(file_path, 'rb') as f:
            form = aiohttp.FormData()
            form.add_field('key', IMGBB_API_KEY)
            form.add_field('image', f)

            async with session.post('https://api.imgbb.com/1/upload', data=form) as response:
                if response.status == 200:
                    response_json = await response.json()
                    return response_json['data']['url']
                else:
                    raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ imgbb: {response.status}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ Imgur
async def upload_image_to_imgur(file_path: str) -> str:
    IMGUR_CLIENT_ID = '5932e0bc7fdb523'  # –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π ID –∫–ª–∏–µ–Ω—Ç–∞ Imgur
    headers = {'Authorization': f'Client-ID {IMGUR_CLIENT_ID}'}
    async with aiohttp.ClientSession() as session:
        with open(file_path, 'rb') as f:
            form = aiohttp.FormData()
            form.add_field('image', f)

            async with session.post('https://api.imgur.com/3/image', headers=headers, data=form) as response:
                if response.status == 200:
                    response_json = await response.json()
                    return response_json['data']['link']
                else:
                    raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Imgur: {response.status}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ Catbox
async def upload_image_to_catbox(file_path: str) -> str:
    async with aiohttp.ClientSession() as session:
        with open(file_path, 'rb') as f:
            form = aiohttp.FormData()
            form.add_field('reqtype', 'fileupload')
            form.add_field('fileToUpload', f)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—à userhash
            form.add_field('userhash', '1f68d2a125c66f6ab79a4f89c')

            async with session.post('https://catbox.moe/user/api.php', data=form) as response:
                if response.status == 200:
                    return await response.text()  # –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                else:
                    raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Catbox: {response.status}")

async def upload_image_to_freeimage(file_path: str) -> str:
    async with aiohttp.ClientSession() as session:
        with open(file_path, 'rb') as f:
            form = aiohttp.FormData()
            form.add_field('key', '6d207e02198a847aa98d0a2a901485a5')  # –í–∞—à API –∫–ª—é—á –¥–ª—è freeimage.host
            form.add_field('action', 'upload')
            form.add_field('source', f)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏

            async with session.post('https://freeimage.host/api/1/upload', data=form) as response:
                if response.status == 200:
                    response_json = await response.json()
                    return response_json['image']['url']  # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–∏ –∫ URL –≤ –æ—Ç–≤–µ—Ç–µ
                elif response.status == 400:
                    response_text = await response.text()
                    raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Free Image Hosting: {response_text}")
                else:
                    raise Exception(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Free Image Hosting: {response.status}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
async def upload_image(file_path: str) -> str:
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ imgbb
        return await upload_image_to_imgbb(file_path)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ imgbb: {e}")
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Cloudinary
            return await upload_image_to_cloudinary(file_path)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Cloudinary: {e}")
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Free Image Hosting
                return await upload_image_to_freeimage(file_path)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Free Image Hosting: {e}")
                try:
                    # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Catbox
                    return await upload_image_to_catbox(file_path)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Catbox: {e}")
                    try:
                        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Imgur
                        return await upload_image_to_imgur(file_path)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Imgur: {e}")
                        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã.")

import re

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ç–∫—É —Ç–µ–≥–æ–≤
markup_tags = {
    '*': 'strong',  # –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
    '_': 'em',      # –ö—É—Ä—Å–∏–≤
}

import re

def apply_markup(text: str) -> dict:
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –∫ —Ç–µ–∫—Å—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–∞–Ω–¥ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∑–µ–ª –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Telegra.ph."""
    
    text = text.strip()  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –≤ –∫–æ–Ω—Ü–µ —Ç–µ–∫—Å—Ç–∞
    text_lower = text.lower()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
    if text_lower.startswith("–ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫: "):
        content = text[len("–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫: "):].strip()
        content = apply_markup_to_content(content)
        return {"tag": "h4", "children": content}
    elif text_lower.startswith("—Ü–∏—Ç–∞—Ç–∞:"):
        content = text[len("–¶–∏—Ç–∞—Ç–∞:"):].strip()
        content = apply_markup_to_content(content)
        return {"tag": "blockquote", "children": content}
    elif text_lower.startswith("–∑–∞–≥–æ–ª–æ–≤–æ–∫: "):
        content = text[len("–ó–∞–≥–æ–ª–æ–≤–æ–∫: "):].strip()
        content = apply_markup_to_content(content)
        return {"tag": "h3", "children": content}
    elif text_lower.startswith("—Ü–∏—Ç–∞—Ç–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É:"):
        content = text[len("–¶–∏—Ç–∞—Ç–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É:"):].strip()
        content = apply_markup_to_content(content)
        return {"tag": "aside", "children": content}
    elif text_lower.startswith("***"):
        return {"tag": "hr"}
    elif text_lower.startswith("–≤–∏–¥–µ–æ: "):
        video_url = text[len("–í–∏–¥–µ–æ: "):].strip()
        # –ö–æ–¥–∏—Ä—É–µ–º URL, —á—Ç–æ–±—ã –æ–Ω –ø–æ–¥—Ö–æ–¥–∏–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ src
        encoded_url = re.sub(r'https://', 'https%3A%2F%2F', video_url)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ YouTube –∏–ª–∏ Vimeo
        if "youtube.com" in video_url or "youtu.be" in video_url:
            return {
                "tag": "figure",
                "children": [
                    {
                        "tag": "iframe",
                        "attrs": {
                            "src": f"/embed/youtube?url={encoded_url}",
                            "width": 640,
                            "height": 360,
                            "frameborder": 0,
                            "allowtransparency": "true",
                            "allowfullscreen": "true",
                            "scrolling": "no"
                        }
                    }
                ]
            }
        elif "vimeo.com" in video_url:
            return {
                "tag": "figure",
                "children": [
                    {
                        "tag": "iframe",
                        "attrs": {
                            "src": f"/embed/vimeo?url={encoded_url}",
                            "width": 640,
                            "height": 360,
                            "frameborder": 0,
                            "allowtransparency": "true",
                            "allowfullscreen": "true",
                            "scrolling": "no"
                        }
                    }
                ]
            }

    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
    content = apply_markup_to_content(text)
    return {"tag": "div", "children": content}

def apply_markup_to_content(content: str) -> list:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ç–∫—É –≤ —Ç–µ–∫—Å—Ç–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–∑–ª–æ–≤ –¥–ª—è Telegra.ph."""
    nodes = []

    # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏
    regex_markup = re.compile(r'(\*|_)(.*?)\1', re.DOTALL)
    link_regex = re.compile(r'\[(.*?)\]\((.*?)\)', re.DOTALL)

    # –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏
    pos = 0
    temp_nodes = []
    for match in link_regex.finditer(content):
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–æ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        if pos < match.start():
            temp_nodes.append(content[pos:match.start()])

        # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–µ–ª —Å—Å—ã–ª–∫–∏
        link_text, url = match.groups()
        temp_nodes.append({"tag": "a", "attrs": {"href": url}, "children": [{"tag": "text", "children": [link_text]}]})

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        pos = match.end()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–∏–ø–µ—Ä—Å—Å—ã–ª–æ–∫
    if pos < len(content):
        temp_nodes.append(content[pos:])

    # –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—É—é —Ä–∞–∑–º–µ—Ç–∫—É
    for node in temp_nodes:
        if isinstance(node, str):
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
            while True:
                match = regex_markup.search(node)
                if not match:
                    # –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç
                    nodes.append({"tag": "text", "children": [node]})
                    break
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–æ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                if match.start() > 0:
                    nodes.append({"tag": "text", "children": [node[:match.start()]]})

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–≥ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —É–∑–µ–ª
                tag = markup_tags.get(match.group(1))
                if tag:
                    nodes.append({"tag": tag, "children": [match.group(2)]})

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É: –æ–±—Ä–µ–∑–∞–µ–º –µ—ë –¥–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                node = node[match.end():]
        else:
            nodes.append(node)

    return nodes

async def edit_article(update: Update, context: CallbackContext) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–º –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ (–Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏)
    if update.callback_query:
        query = update.callback_query
        user_id = query.from_user.id
    else:
        user_id = update.message.from_user.id  # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    media = user_data[user_id].get('media', [])
    
    if not media:
        await update.message.reply_text("üö´ –û—à–∏–±–∫–∞: –Ω–µ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏
    if 'last_content_message_id' in user_data[user_id]:
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º effective_chat
                message_id=user_data[user_id]['last_content_message_id']
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º: {e}")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    items_per_page = 30  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    total_pages = (len(media) + items_per_page - 1) // items_per_page  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    current_page = user_data[user_id].get('current_page', 0)  # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    current_page = max(0, min(current_page, total_pages - 1))
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    keyboard = []
    image_counter = 1  # –°—á—ë—Ç—á–∏–∫ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    start_idx = current_page * items_per_page
    end_idx = min(start_idx + items_per_page, len(media))

    for idx in range(start_idx, end_idx):
        item = media[idx]
        if item['type'] == 'text':
            text = item['content']
            if isinstance(text, dict) and 'children' in text:
                text = ''.join(child['children'][0] for child in text['children'] if isinstance(child, dict) and 'children' in child)
            preview_text = (text[:12] + '...') if len(text) > 12 else text
        else:
            preview_text = f"{image_counter} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
            image_counter += 1
        
        keyboard.append([
            InlineKeyboardButton(text=str(preview_text), callback_data=f"preview_{idx}"),
            InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{idx}"),
            InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{idx}"),
        ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if current_page > 0:
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='page_down')])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if current_page < total_pages - 1:
        keyboard.append([InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data='page_up')])
    
    keyboard.append([InlineKeyboardButton("üåå –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä üåå", callback_data='preview_article')])
    keyboard.append([InlineKeyboardButton("–ü–æ–º–æ—â—å –∏ —Ä–∞–∑–º–µ—Ç–∫–∞", callback_data='help_command')])
    keyboard.append([InlineKeyboardButton("–ù–∞–π—Ç–∏ –∞–≤—Ç–æ—Ä–∞, –∞–Ω–∏–º–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –ò–ò", callback_data='start_search')])
    keyboard.append([InlineKeyboardButton("üå† –ö –ó–∞–≤–µ—Ä—à–µ–Ω–∏—é –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ üå†", callback_data='create_article')])
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    sent_message = await (query.message if update.callback_query else update.message).reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:", 
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    user_data[user_id]['last_content_message_id'] = sent_message.message_id
    user_data[user_id]['current_page'] = current_page  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É



async def handle_edit_delete(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    action, index = query.data.split('_')
    index = int(index)

    media = user_data[user_id].get('media', [])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Å —Ç–∞–∫–∏–º –∏–Ω–¥–µ–∫—Å–æ–º
    if index >= len(media):
        await query.message.reply_text("üö´ –û—à–∏–±–∫–∞: —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
        return

    if action == 'edit':
        # –ï—Å–ª–∏ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ‚Äî –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if media[index]['type'] == 'image':
            context.user_data['editing_index'] = index
            await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç:")
            return ASKING_FOR_IMAGE  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–∂–∏–¥–∞–Ω–∏—é –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        # –ï—Å–ª–∏ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ ‚Äî —Ç–µ–∫—Å—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        elif media[index]['type'] == 'text':
            context.user_data['editing_index'] = index
            await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç:")
            return EDITING_FRAGMENT  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞

    elif action == 'delete':
        if index < len(media):
            media.pop(index)
            user_data[user_id]['media'] = media  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            PAGE_SIZE = 30

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ user_data (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
            if 'page' not in user_data[user_id]:
                user_data[user_id]['page'] = 1
            current_page = user_data[user_id]['page']

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = []
            image_counter = 1  # –°—á—ë—Ç—á–∏–∫ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

            # –ü–æ–¥—Å—á—ë—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            total_items = len(media)
            total_pages = (total_items + PAGE_SIZE - 1) // PAGE_SIZE  # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü

            # –ü–æ–∫–∞–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            start_idx = (current_page - 1) * PAGE_SIZE
            end_idx = start_idx + PAGE_SIZE

            for idx, item in enumerate(media[start_idx:end_idx], start=start_idx):
                if item['type'] == 'text':
                    text = item['content']
                    
                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if isinstance(text, dict) and 'children' in text:
                        text = ''.join(child['children'][0] for child in text['children'] if isinstance(child, dict) and 'children' in child)
                    
                    preview_text = (text[:12] + '...') if len(text) > 12 else text
                else:  # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç ‚Äî —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    preview_text = f"{image_counter} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"  # –ù—É–º–µ—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    image_counter += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                keyboard.append([
                    InlineKeyboardButton(text=str(preview_text), callback_data=f"preview_{idx}"),
                    InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{idx}"),
                    InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{idx}"),
                ])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
            navigation_buttons = []
            if current_page > 1:
                navigation_buttons.append(InlineKeyboardButton("‚¨ÜÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f"prev_page_{current_page - 1}"))
            if current_page < total_pages:
                navigation_buttons.append(InlineKeyboardButton("‚¨áÔ∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data=f"next_page_{current_page + 1}"))

            if navigation_buttons:
                keyboard.append(navigation_buttons)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
            keyboard.append([InlineKeyboardButton("üåå –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä üåå", callback_data='preview_article')])
            keyboard.append([InlineKeyboardButton("–ü–æ–º–æ—â—å –∏ —Ä–∞–∑–º–µ—Ç–∫–∞", callback_data='help_command')])
            keyboard.append([InlineKeyboardButton("–ù–∞–π—Ç–∏ –∞–≤—Ç–æ—Ä–∞, –∞–Ω–∏–º–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –ò–ò", callback_data='start_search')])
            keyboard.append([InlineKeyboardButton("üå† –ö –ó–∞–≤–µ—Ä—à–µ–Ω–∏—é –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ üå†", callback_data='create_article')])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∫–Ω–æ–ø–æ–∫
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.message.edit_reply_markup(reply_markup=reply_markup)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

            await query.message.reply_text("‚úÖ –§—Ä–∞–≥–º–µ–Ω—Ç —É–¥–∞–ª—ë–Ω.")
        return





async def handle_new_text(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    index = context.user_data['editing_index']
    media = user_data[user_id].get('media', [])

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
    if index >= 0 and index < len(media):
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π —ç–ª–µ–º–µ–Ω—Ç ‚Äî —ç—Ç–æ —Ç–µ–∫—Å—Ç
        if media[index]['type'] == 'text':
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            formatted_text = apply_markup(update.message.text)
            media[index] = {  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç
                'type': 'text',
                'content': formatted_text
            }
            user_data[user_id]['media'] = media  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏
            if 'last_content_message_id' in user_data[user_id]:
                try:
                    await context.bot.delete_message(
                        chat_id=update.message.chat_id, 
                        message_id=user_data[user_id]['last_content_message_id']
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º: {e}")

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            items_per_page = 30  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            total_pages = (len(media) + items_per_page - 1) // items_per_page  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
            current_page = user_data[user_id].get('current_page', 0)  # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            current_page = max(0, min(current_page, total_pages - 1))


            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            keyboard = []
            image_counter = 1  # –°—á—ë—Ç—á–∏–∫ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            start_idx = current_page * items_per_page
            end_idx = min(start_idx + items_per_page, len(media))

            for idx, item in enumerate(media):
                item = media[idx]
                if item['type'] == 'text':
                    text = item['content']
                    
                    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if isinstance(text, dict) and 'children' in text:
                        text = ''.join(child['children'][0] for child in text['children'] if isinstance(child, dict) and 'children' in child)
                    
                    preview_text = (text[:12] + '...') if len(text) > 12 else text
                else:  # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç ‚Äî —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    preview_text = f"{image_counter} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"  # –ù—É–º–µ—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    image_counter += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
                keyboard.append([
                    InlineKeyboardButton(text=str(preview_text), callback_data=f"preview_{idx}"),
                    InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{idx}"),
                    InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{idx}"),
                ])

            if current_page > 0:
                keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='page_down')])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if current_page < total_pages - 1:
                keyboard.append([InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data='page_up')])
            

            keyboard.append([
                InlineKeyboardButton("üåå –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä üåå ", callback_data='preview_article')
            ])    

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∫–Ω–æ–ø–æ–∫
            reply_markup = InlineKeyboardMarkup(keyboard)
            sent_message = await context.bot.send_message(
                chat_id=update.message.chat_id,
                text='üìù –¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏2:',
                reply_markup=reply_markup
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
            user_data[user_id]['last_content_message_id'] = sent_message.message_id
            user_data[user_id]['current_page'] = current_page  
            # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞
            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text='‚úÖ –¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.',
                reply_to_message_id=update.message.message_id
            )

            # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            del context.user_data['editing_index']

            return ASKING_FOR_IMAGE
        else:
            # –û—à–∏–±–∫–∞, –µ—Å–ª–∏ —Ç–∏–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–µ —Ç–µ–∫—Å—Ç
            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text='üö´ –û—à–∏–±–∫–∞: —É–∫–∞–∑–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º.',
                reply_to_message_id=update.message.message_id
            )
            del context.user_data['editing_index']  # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–µ–∫—Å, –µ—Å–ª–∏ –æ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
            return ConversationHandler.END
    else:
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text='üö´ –û—à–∏–±–∫–∞: —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.',
            reply_to_message_id=update.message.message_id
        )
        del context.user_data['editing_index']  # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–µ–∫—Å, –µ—Å–ª–∏ –æ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
        return ConversationHandler.END


async def handle_new_image(update: Update, context: CallbackContext, index: int, media: list) -> int:
    user_id = update.message.from_user.id
    message_id = update.message.message_id

    if update.message.photo or update.message.document:
        if update.message.photo:
            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text='üö´ –û—à–∏–±–∫–∞: –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–∞–π–ª (—Ñ–æ—Ä–º–∞—Ç JPG, PNG –∏–ª–∏ .RAR –¥–ª—è .GIF), –±–µ–∑ —Å–∂–∞—Ç–∏—è. –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –≤–≤–µ–¥–∏—Ç–µ /help',
                reply_to_message_id=message_id
            )
            return ASKING_FOR_IMAGE 

        elif update.message.document:
            file_name = update.message.document.file_name
            file_ext = file_name.lower().split('.')[-1]
            file = await context.bot.get_file(update.message.document.file_id)

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        with tempfile.NamedTemporaryFile(delete=False, suffix=f'.{file_ext}') as tmp_file:
            file_path = tmp_file.name
            await file.download_to_drive(file_path)

        if file_ext == 'rar':
            new_file_path = f'{os.path.splitext(file_path)[0]}.gif'
            shutil.move(file_path, new_file_path)
            file_path = new_file_path
            file_name = os.path.basename(file_path)
            file_ext = 'gif'

        if file_ext in ('jpg', 'jpeg', 'png', 'gif'):
            if file_ext == 'gif':
                try:
                    image_url = await upload_image(file_path)
                    media[index] = {  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        'type': 'image',
                        'url': image_url,
                        'caption': update.message.caption if update.message.caption else ""
                    }
                    user_data[user_id]['media'] = media  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

                    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                    if 'last_image_message_id' in user_data[user_id]:
                        try:
                            await context.bot.delete_message(chat_id=update.message.chat_id, message_id=user_data[user_id]['last_image_message_id'])
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    sent_message = await context.bot.send_message(
                        chat_id=update.message.chat_id,
                        text='‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—á–µ–Ω—å –æ–±–Ω–æ–≤–ª–µ–Ω–æ.',
                        reply_to_message_id=message_id
                    )

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    user_data[user_id]['last_image_message_id'] = sent_message.message_id

                    # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    del context.user_data['editing_index']

                    return ASKING_FOR_IMAGE
                except Exception as e:
                    await context.bot.send_message(
                        chat_id=update.message.chat_id,
                        text=f'üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                        reply_to_message_id=message_id
                    )
                    return ConversationHandler.END

            else:
                if os.path.getsize(file_path) > 5 * 1024 * 1024:
                    compressed_path = f'{os.path.splitext(file_path)[0]}_compressed.jpg'
                    compress_image(file_path, compressed_path)
                    file_path = compressed_path

                try:
                    image_url = await upload_image(file_path)
                    media[index] = {  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        'type': 'image',
                        'url': image_url,
                        'caption': update.message.caption if update.message.caption else ""
                    }
                    user_data[user_id]['media'] = media  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                    os.remove(file_path)

                    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                    if 'last_image_message_id' in user_data[user_id]:
                        try:
                            await context.bot.delete_message(chat_id=update.message.chat_id, message_id=user_data[user_id]['last_image_message_id'])
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    sent_message = await context.bot.send_message(
                        chat_id=update.message.chat_id,
                        text='‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.',
                        reply_to_message_id=message_id
                    )

                    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if 'last_content_message_id' in user_data[user_id]:
                        try:
                            await context.bot.delete_message(
                                chat_id=update.message.chat_id, 
                                message_id=user_data[user_id]['last_content_message_id']
                            )
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º: {e}")


                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                    items_per_page = 30  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    total_pages = (len(media) + items_per_page - 1) // items_per_page  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
                    current_page = user_data[user_id].get('current_page', 0)  # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    current_page = max(0, min(current_page, total_pages - 1))

                    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏
                    keyboard = []
                    image_counter = 1  # –°—á—ë—Ç—á–∏–∫ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    start_idx = current_page * items_per_page
                    end_idx = min(start_idx + items_per_page, len(media))
                    for idx in range(start_idx, end_idx):
                        item = media[idx]
                        if item['type'] == 'text':
                            text = item['content']
                            
                            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                            if isinstance(text, dict) and 'children' in text:
                                text = ''.join(child['children'][0] for child in text['children'] if isinstance(child, dict) and 'children' in child)
                            
                            preview_text = (text[:12] + '...') if len(text) > 12 else text
                        else:  # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç ‚Äî —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                            preview_text = f"–û–±–Ω –∏–∑–æ–±—Ä-–∏–µ"  # –ù—É–º–µ—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                            image_counter += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
                        keyboard.append([
                            InlineKeyboardButton(text=str(preview_text), callback_data=f"preview_{idx}"),
                            InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{idx}"),
                            InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{idx}"),
                        ])

                    if current_page > 0:
                        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='page_down')])
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                    if current_page < total_pages - 1:
                        keyboard.append([InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data='page_up')])
                    
                    keyboard.append([
                        InlineKeyboardButton("üåå –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä üåå ", callback_data='preview_article')
                    ])    

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∫–Ω–æ–ø–æ–∫
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    sent_message = await context.bot.send_message(
                        chat_id=update.message.chat_id,
                        text='üìù –¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏1:',
                        reply_markup=reply_markup
                    )

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    user_data[user_id]['last_content_message_id'] = sent_message.message_id
                    user_data[user_id]['current_page'] = current_page  

                    # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                    del context.user_data['editing_index']

                    return ASKING_FOR_IMAGE
                except Exception as e:
                    await context.bot.send_message(
                        chat_id=update.message.chat_id,
                        text=f'üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                        reply_to_message_id=message_id
                    )
                    return ConversationHandler.END

        else:
            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG, PNG –∏–ª–∏ .RAR –¥–ª—è .GIF.',
                reply_to_message_id=message_id
            )
            return ASKING_FOR_IMAGE
    else:
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text='üö´ –û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª.',
            reply_to_message_id=message_id
        )
        return ConversationHandler.END




async def handle_image(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    caption = update.message.caption
    message_id = update.message.message_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-–ª–∏–±–æ
    if 'editing_index' in context.user_data:
        index = context.user_data['editing_index']
        media = user_data[user_id].get('media', [])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
        if 0 <= index < len(media):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, –∏ –µ—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç
            if media[index]['type'] == 'text':
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ç–µ–∫—Å—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –∫–∞–∫ —Ç–µ–∫—Å—Ç
                if update.message.text:
                    return await handle_new_text_from_image(update, context, index, media)

                # –ï—Å–ª–∏ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏—à–ª–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                if update.message.photo or update.message.document:
                    return await handle_new_image(update, context, index, media)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if media[index]['type'] == 'image':
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                if update.message.text:
                    return await handle_new_text_from_image(update, context, index, media)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ç–æ
                if update.message.photo:
                    await context.bot.send_message(
                        chat_id=update.message.chat_id,
                        text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–∞–π–ª (—Ñ–æ—Ä–º–∞—Ç JPG, PNG –∏–ª–∏ .RAR –¥–ª—è .GIF), –±–µ–∑ —Å–∂–∞—Ç–∏—è. –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –≤–≤–µ–¥–∏—Ç–µ /help',
                        reply_to_message_id=message_id
                    )
                    return ASKING_FOR_IMAGE

                elif update.message.document:
                    file_name = update.message.document.file_name
                    if file_name:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–∞–π–ª –∏–º–µ–µ—Ç –∏–º—è
                        file_ext = file_name.lower().split('.')[-1]

                        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –≤—ã—Ö–æ–¥–∏–º
                        if not file_ext:
                            await context.bot.send_message(
                                chat_id=update.message.chat_id,
                                text='üö´ –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º.',
                                reply_to_message_id=message_id
                            )
                            return ConversationHandler.END

                        file = await context.bot.get_file(update.message.document.file_id)
                        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                        with tempfile.NamedTemporaryFile(delete=False, suffix=f'.{file_ext}') as tmp_file:
                            file_path = tmp_file.name
                            await file.download_to_drive(file_path)                    

                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞

                        if file_ext == 'rar':
                            new_file_path = f'{os.path.splitext(file_path)[0]}.gif'
                            shutil.move(file_path, new_file_path)
                            file_path = new_file_path
                            file_name = os.path.basename(file_path)
                            file_ext = 'gif'

                        if file_ext in ('jpg', 'jpeg', 'png', 'gif'):
                            if file_ext == 'gif':
                                try:
                                    image_url = await upload_image(file_path)
                                    media[index] = {  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                        'type': 'image',
                                        'url': image_url,
                                        'caption': caption if caption else ""
                                    }
                                    user_data[user_id]['media'] = media  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

                                    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                                    if 'last_image_message_id' in user_data[user_id]:
                                        try:
                                            await context.bot.delete_message(chat_id=update.message.chat_id, message_id=user_data[user_id]['last_image_message_id'])
                                        except Exception as e:
                                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                    sent_message = await context.bot.send_message(
                                        chat_id=update.message.chat_id,
                                        text='‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.',
                                        reply_to_message_id=message_id
                                    )

                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                                    user_data[user_id]['last_image_message_id'] = sent_message.message_id

                                    # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                                    del context.user_data['editing_index']

                                    return ASKING_FOR_IMAGE
                                except Exception as e:
                                    await context.bot.send_message(
                                        chat_id=update.message.chat_id,
                                        text=f'üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                                        reply_to_message_id=message_id
                                    )
                                    return ConversationHandler.END
                            else:
                                if os.path.getsize(file_path) > 5 * 1024 * 1024:
                                    compressed_path = f'{os.path.splitext(file_path)[0]}_compressed.jpg'
                                    compress_image(file_path, compressed_path)
                                    file_path = compressed_path

                                try:




                                    image_url = await upload_image(file_path)
                                    media[index] = {  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                        'type': 'image',
                                        'url': image_url,
                                        'caption': caption if caption else ""
                                    }
                                    user_data[user_id]['media'] = media # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                                    os.remove(file_path)

                                    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                                    if 'last_image_message_id' in user_data[user_id]:
                                        try:
                                            await context.bot.delete_message(chat_id=update.message.chat_id, message_id=user_data[user_id]['last_image_message_id'])
                                        except Exception as e:
                                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                    keyboard = []
                                    image_counter = 1  # –°—á—ë—Ç—á–∏–∫ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

                                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                                    items_per_page = 30  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                                    total_pages = (len(media) + items_per_page - 1) // items_per_page  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
                                    current_page = user_data[user_id].get('current_page', 0)  # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

                                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                                    current_page = max(0, min(current_page, total_pages - 1))

                                    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏
                                    start_idx = current_page * items_per_page
                                    end_idx = min(start_idx + items_per_page, len(media))
                                    for idx in range(start_idx, end_idx):
                                        item = media[idx]
                                        if item['type'] == 'text':
                                            text = item['content']
                                            
                                            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                                            if isinstance(text, dict) and 'children' in text:
                                                text = ''.join(child['children'][0] for child in text['children'] if isinstance(child, dict) and 'children' in child)
                                            
                                            preview_text = (text[:12] + '...') if len(text) > 12 else text
                                        else:  # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç ‚Äî —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                                            preview_text = f"{image_counter} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"  # –ù—É–º–µ—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                                            image_counter += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                                        
                                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
                                        keyboard.append([
                                            InlineKeyboardButton(text=str(preview_text), callback_data=f"preview_{idx}"),
                                            InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{idx}"),
                                            InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{idx}"),
                                        ])

                                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                                    if current_page > 0:
                                        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='page_down')])

                                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
                                    if current_page < total_pages - 1:
                                        keyboard.append([InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data='page_up')])

                                    keyboard.append([InlineKeyboardButton("üåå –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä üåå", callback_data='preview_article')])
                                    keyboard.append([InlineKeyboardButton("–ü–æ–º–æ—â—å –∏ —Ä–∞–∑–º–µ—Ç–∫–∞", callback_data='help_command')])
                                    keyboard.append([InlineKeyboardButton("–ù–∞–π—Ç–∏ –∞–≤—Ç–æ—Ä–∞, –∞–Ω–∏–º–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –ò–ò", callback_data='start_search')])
                                    keyboard.append([InlineKeyboardButton("üå† –ö –ó–∞–≤–µ—Ä—à–µ–Ω–∏—é –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ üå†", callback_data='create_article')])


                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∫–Ω–æ–ø–æ–∫
                                    reply_markup = InlineKeyboardMarkup(keyboard)
                                    sent_message_with_buttons = await context.bot.send_message(
                                        chat_id=update.message.chat_id,
                                        text='‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ó–∞–º–µ–Ω–µ–Ω–æ. \nüìù –¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏:',
                                        reply_markup=reply_markup
                                    )

                                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
                                    user_data[user_id]['last_image_message_id'] = sent_message_with_buttons.message_id
                                    user_data[user_id]['current_page'] = current_page

                                    # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                                    del context.user_data['editing_index']

                                    return ASKING_FOR_IMAGE
                                except Exception as e:
                                    await context.bot.send_message(
                                        chat_id=update.message.chat_id,
                                        text=f'üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
                                        reply_to_message_id=message_id
                                    )
                                    return ConversationHandler.END

                        else:
                            await context.bot.send_message(
                                chat_id=update.message.chat_id,
                                text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG, PNG –∏–ª–∏ .RAR –¥–ª—è .GIF.',
                                reply_to_message_id=message_id
                            )
                            return ASKING_FOR_IMAGE

                    elif media[index]['type'] == 'text':
                        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç, –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞
                        return await handle_new_text(update, context)
                    else:
                        await context.bot.send_message(
                            chat_id=update.message.chat_id,
                            text='üö´ –û—à–∏–±–∫–∞: —É–∫–∞–∑–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø.',
                            reply_to_message_id=message_id
                        )
                        del context.user_data['editing_index']
                        return ConversationHandler.END
                else:
                    await context.bot.send_message(
                        chat_id=update.message.chat_id,
                        text='üö´ –û—à–∏–±–∫–∞: —É–∫–∞–∑–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.',
                        reply_to_message_id=message_id
                    )
                    del context.user_data['editing_index']  # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–µ–∫—Å, –µ—Å–ª–∏ –æ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
                    return ConversationHandler.END

    # –ï—Å–ª–∏ –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if user_id in user_data and user_data[user_id]['status'] == 'awaiting_image':
        if update.message.photo:
            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–∞–π–ª (—Ñ–æ—Ä–º–∞—Ç JPG, PNG –∏–ª–∏ .RAR –¥–ª—è .GIF), –±–µ–∑ —Å–∂–∞—Ç–∏—è. –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –≤–≤–µ–¥–∏—Ç–µ /help',
                reply_to_message_id=message_id
            )
            return ASKING_FOR_IMAGE

        elif update.message.document:
            file_name = update.message.document.file_name
            file_ext = file_name.lower().split('.')[-1]
            file = await context.bot.get_file(update.message.document.file_id)

            with tempfile.NamedTemporaryFile(delete=False, suffix=f'.{file_ext}') as tmp_file:
                file_path = tmp_file.name
                await file.download_to_drive(file_path)

            if file_ext == 'rar':
                new_file_path = f'{os.path.splitext(file_path)[0]}.gif'
                shutil.move(file_path, new_file_path)
                file_path = new_file_path
                file_name = os.path.basename(file_path)
                file_ext = 'gif'

            if file_ext in ('jpg', 'jpeg', 'png', 'gif'):
                if file_ext == 'gif':
                    try:
                        image_url = await upload_image(file_path)
                        if 'media' not in user_data[user_id]:
                            user_data[user_id]['media'] = []
                        user_data[user_id]['media'].append({
                            'type': 'image',
                            'url': image_url,
                            'caption': caption if caption else ""
                        })

                        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                        if 'last_image_message_id' in user_data[user_id]:
                            try:
                                await context.bot.delete_message(chat_id=update.message.chat_id, message_id=user_data[user_id]['last_image_message_id'])
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

                        keyboard = [
                            [InlineKeyboardButton("‚ÄºÔ∏è–°–±—Ä–æ—Å –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –í–æ–∑–≤—Ä–∞—Ç –∫ –ù–∞—á–∞–ª—É‚ÄºÔ∏è", callback_data='restart')],
                            [InlineKeyboardButton("üìù –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –æ—à–∏–±–∫–∏ üìù", callback_data='check_text')],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞                           
                            [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç", callback_data='delete_last')],
                            [InlineKeyboardButton("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data='preview_article')],
                            [InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data='edit_article')],
                            [InlineKeyboardButton("–ü–æ–º–æ—â—å –∏ —Ä–∞–∑–º–µ—Ç–∫–∞", callback_data='help_command')],
                            [InlineKeyboardButton("üå† –ö –ó–∞–≤–µ—Ä—à–µ–Ω–∏—é –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ üå†", callback_data='create_article')]
                        ]

                        reply_markup = InlineKeyboardMarkup(keyboard)                                

                        if 'image_counter' not in user_data[user_id]:
                            user_data[user_id]['image_counter'] = 0

                        # –ö–æ–≥–¥–∞ –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
                        user_data[user_id]['image_counter'] += 1
                        image_counter = user_data[user_id]['image_counter']

                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—á—ë—Ç—á–∏–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                        image_text = "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" if image_counter == 1 else "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                        sent_message = await context.bot.send_message(
                            chat_id=update.message.chat_id,
                            text=f'‚úÖ {image_counter} {image_text} –¥–æ–±–∞–≤–ª–µ–Ω–æ.\n\n –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ —á–µ–º –æ–¥–Ω–æ. –ó–∞—Ç–µ–º –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —Ç–µ–∫—Å—Ç.\n\n –¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:',
                            reply_to_message_id=message_id,
                            reply_markup=reply_markup
                        )

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                        user_data[user_id]['last_image_message_id'] = sent_message.message_id

                        return ASKING_FOR_IMAGE
                    except Exception as e:
                        await context.bot.send_message(
                            chat_id=update.message.chat_id,
                            text=f'üö´–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}. –ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–∞–π–ª –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –Ω–∞–∂–∞—Ç—å /restart',
                            reply_to_message_id=message_id
                        )
                        return ConversationHandler.END
                else:
                    if os.path.getsize(file_path) > 5 * 1024 * 1024:
                        compressed_path = f'{os.path.splitext(file_path)[0]}_compressed.jpg'
                        compress_image(file_path, compressed_path)
                        file_path = compressed_path

                    try:
                        image_url = await upload_image(file_path)
                        if 'media' not in user_data[user_id]:
                            user_data[user_id]['media'] = []
                        user_data[user_id]['media'].append({
                            'type': 'image',
                            'url': image_url,
                            'caption': caption if caption else ""
                        })
                        os.remove(file_path)

                        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                        if 'last_image_message_id' in user_data[user_id]:
                            try:
                                await context.bot.delete_message(chat_id=update.message.chat_id, message_id=user_data[user_id]['last_image_message_id'])
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

                        keyboard = [
                            [InlineKeyboardButton("‚ÄºÔ∏è–°–±—Ä–æ—Å –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –í–æ–∑–≤—Ä–∞—Ç –∫ –ù–∞—á–∞–ª—É‚ÄºÔ∏è", callback_data='restart')],
                            [InlineKeyboardButton("üìù –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –æ—à–∏–±–∫–∏ üìù", callback_data='check_text')],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞                           
                            [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç", callback_data='delete_last')],
                            [InlineKeyboardButton("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data='preview_article')],
                            [InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data='edit_article')],
                            [InlineKeyboardButton("–ü–æ–º–æ—â—å –∏ —Ä–∞–∑–º–µ—Ç–∫–∞", callback_data='help_command')],
                            [InlineKeyboardButton("üå† –ö –ó–∞–≤–µ—Ä—à–µ–Ω–∏—é –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ üå†", callback_data='create_article')]
                        ]

                        reply_markup = InlineKeyboardMarkup(keyboard) 


                        if 'image_counter' not in user_data[user_id]:
                            user_data[user_id]['image_counter'] = 0

                        # –ö–æ–≥–¥–∞ –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
                        user_data[user_id]['image_counter'] += 1
                        image_counter = user_data[user_id]['image_counter']

                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—á—ë—Ç—á–∏–∫ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                        image_text = "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" if image_counter == 1 else "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
                        sent_message = await context.bot.send_message(
                            chat_id=update.message.chat_id,
                            text=f'‚úÖ {image_counter} {image_text} –¥–æ–±–∞–≤–ª–µ–Ω–æ.\n\n –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –∏—Ö –±–æ–ª—å—à–µ —á–µ–º –æ–¥–Ω–æ. –ó–∞—Ç–µ–º –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ —Ç–µ–∫—Å—Ç.\n\n –¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:',
                            reply_to_message_id=message_id,
                            reply_markup=reply_markup
                        )

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                        user_data[user_id]['last_image_message_id'] = sent_message.message_id

                        return ASKING_FOR_IMAGE
                    except Exception as e:
                        await context.bot.send_message(
                            chat_id=update.message.chat_id,
                            text=f'üö´–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}. –ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–∞–π–ª –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –Ω–∞–∂–∞—Ç—å /restart',
                            reply_to_message_id=message_id
                        )
                        return ConversationHandler.END

            else:
                await context.bot.send_message(
                    chat_id=update.message.chat_id,
                    text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG, PNG –∏–ª–∏ .RAR –¥–ª—è .GIF.',
                    reply_to_message_id=message_id
                )
                return ASKING_FOR_IMAGE

        elif update.message.text:
            return await handle_text(update, context)

        else:
            await context.bot.send_message(
                chat_id=update.message.chat_id,
                text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–∞–π–ª (—Ñ–æ—Ä–º–∞—Ç JPG, PNG –∏–ª–∏ .RAR –¥–ª—è .GIF), –±–µ–∑ —Å–∂–∞—Ç–∏—è, –∏–ª–∏ —Ç–µ–∫—Å—Ç.',
                reply_to_message_id=message_id
            )
            return ASKING_FOR_IMAGE

    else:
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text='üö´–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞. –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /restart',
            reply_to_message_id=message_id
        )
        return ConversationHandler.END


        
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_text(update: Update, context: CallbackContext) -> int:
    user_id = update.message.from_user.id
    message_text = update.message.text

    # –ï—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    user_data_entry = user_data.get(user_id, {})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_data_entry.get('status') == 'awaiting_image':
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞–∑–º–µ—Ç–∫–æ–π
        formatted_text = apply_markup(message_text)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–∞–∑–¥–µ–ª–∞ 'media' –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        if 'media' not in user_data_entry:
            user_data_entry['media'] = []

        user_data_entry['media'].append({'type': 'text', 'content': formatted_text})

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        user_data[user_id] = user_data_entry

        # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if 'last_message_id' in user_data_entry:
            try:
                await context.bot.delete_message(
                    chat_id=update.message.chat_id, 
                    message_id=user_data_entry['last_message_id']
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ


        keyboard = [
            [InlineKeyboardButton("‚ÄºÔ∏è–°–±—Ä–æ—Å –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –í–æ–∑–≤—Ä–∞—Ç –∫ –ù–∞—á–∞–ª—É‚ÄºÔ∏è", callback_data='restart')],
            [InlineKeyboardButton("üìù –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç –Ω–∞ –æ—à–∏–±–∫–∏ üìù", callback_data='check_text')],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
            [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç", callback_data='delete_last')],
            [InlineKeyboardButton("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data='preview_article')],
            [InlineKeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data='edit_article')],
            [InlineKeyboardButton("–ü–æ–º–æ—â—å –∏ —Ä–∞–∑–º–µ—Ç–∫–∞", callback_data='help_command')],
            [InlineKeyboardButton("üå† –ö –ó–∞–≤–µ—Ä—à–µ–Ω–∏—é –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ üå†", callback_data='create_article')],
        ]

        reply_markup = InlineKeyboardMarkup(keyboard) 

        if 'text_counter' not in user_data[user_id]:
            user_data[user_id]['text_counter'] = 0

        # –ö–æ–≥–¥–∞ –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
        user_data[user_id]['text_counter'] += 1
        text_counter = user_data[user_id]['text_counter']

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—á—ë—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        text_message = "—Ç–µ–∫—Å—Ç" if text_counter == 1 else "—Ç–µ–∫—Å—Ç–∞"
        sent_message = await update.message.reply_text(
            f'‚úÖ {text_counter} {text_message} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —Ç–µ–∫—Å—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n\n'
            '–õ–∏–±–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥ –Ω–∏–∂–µ:\n',
            reply_to_message_id=update.message.message_id,
            reply_markup=reply_markup  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_data_entry['last_message_id'] = sent_message.message_id
        user_data[user_id] = user_data_entry

        return ASKING_FOR_IMAGE
    else:
        await update.message.reply_text('üö´ –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞. –ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /restart')
        return ConversationHandler.END

def extract_text_from_json(data):
    if isinstance(data, dict):
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ –∫–ª—é—á 'children'
        return ''.join(extract_text_from_json(child) for child in data.get('children', []))
    elif isinstance(data, list):
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
        return ''.join(extract_text_from_json(item) for item in data)
    elif isinstance(data, str):
        # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
        return data
    return ''

async def handle_check_text(update, context):
    user_id = update.effective_user.id
    user_data_entry = user_data.get(user_id, {})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'media' in user_data_entry and user_data_entry['media']:
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        last_text_entry = next((entry['content'] for entry in reversed(user_data_entry['media']) if entry['type'] == 'text'), None)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–≤–ª–µ—á–µ–Ω –ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        if last_text_entry:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–∑ JSON-–æ–±—ä–µ–∫—Ç–∞
            plain_text = extract_text_from_json(last_text_entry)

            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ plain_text
            logging.info(f"Extracted text for user {user_id}: {plain_text}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è Gemini —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            query = (
                f"–ü—Ä–æ–≤–µ—Ä—å –¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏. "
                f"–°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—á–∏—Å–ª–∏ —Å–∞–º—ã–µ –≥—Ä—É–±—ã–µ –∏ –æ—á–µ–≤–∏–¥–Ω—ã–µ –æ—à–∏–±–∫–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –±—É–∫–≤—ã –∏–ª–∏ –æ—á–µ–≤–∏–¥–Ω—ã–µ –æ–ø–µ—á–∞—Ç–∫–∏ "
                f"(–Ω–∞–ø—Ä–∏–º–µ—Ä, '–¥–∞—Å–∫–∞' –≤–º–µ—Å—Ç–æ '–¥–æ—Å–∫–∞'), –ø–µ—Ä–µ—á–∏—Å–ª–∏ –∏—Ö, –ª–∏–±–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ —è–≤–Ω—ã—Ö –æ—à–∏–±–æ–∫ –≤ —Ç–µ–∫—Å—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ "
                f"–ó–∞—Ç–µ–º –ø—Ä–µ–¥—Å—Ç–∞–≤—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–µ–∫—Å—Ç–∞. "
                f"–í –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤—å –ª—é–±—ã–µ –º–µ–Ω–µ–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å. "
                f"–ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏ –∑–∞–º–µ—á–∞–Ω–∏–π –Ω–µ—Ç, —É–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–∫—Å—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.\n\n{plain_text}"
)            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            logging.info(f"Generated query for Gemini: {query}")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ –º–æ–¥–µ–ª—å Gemini –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            response = generate_gemini_response(user_id, query=query, use_context=False)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –æ—Ç–≤–µ—Ç, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await update.callback_query.message.reply_text(response or "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–µ–∫—Å—Ç–∞.")
        else:
            # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
            await update.callback_query.answer("–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    else:
        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await update.callback_query.answer("–¢–µ–∫—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")


async def handle_new_text_from_image(update: Update, context: CallbackContext, index, media) -> int:
    user_id = update.message.from_user.id
    message_text = update.message.text

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –º–µ–¥–∏–∞
    if user_id not in user_data or 'media' not in user_data[user_id]:
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text='üö´ –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.',
            reply_to_message_id=update.message.message_id
        )
        return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∏–Ω–¥–µ–∫—Å–∞
    if not (0 <= index < len(media)):
        await context.bot.send_message(
            chat_id=update.message.chat_id,
            text='üö´ –û—à–∏–±–∫–∞: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏–Ω–¥–µ–∫—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞.',
            reply_to_message_id=update.message.message_id
        )
        return ConversationHandler.END

    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ç–∫–∏ –∫ —Ç–µ–∫—Å—Ç—É
    formatted_text = apply_markup(message_text)

    # –ó–∞–º–µ–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Ç–µ–∫—Å—Ç –≤ media
    media[index] = {
        'type': 'text',
        'content': formatted_text
    }
    user_data[user_id]['media'] = media  # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await context.bot.send_message(
        chat_id=update.message.chat_id,
        text='‚úÖ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ.',
        reply_to_message_id=update.message.message_id
    )

    # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–º–µ–Ω—ã
    del context.user_data['editing_index']

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if 'last_content_message_id' in user_data[user_id]:
        try:
            await context.bot.delete_message(
                chat_id=update.message.chat_id, 
                message_id=user_data[user_id]['last_content_message_id']
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º: {e}")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    items_per_page = 30  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    total_pages = (len(media) + items_per_page - 1) // items_per_page  # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    current_page = user_data[user_id].get('current_page', 0)  # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    current_page = max(0, min(current_page, total_pages - 1))        

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏
    keyboard = []
    image_counter = 1  # –°—á—ë—Ç—á–∏–∫ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    start_idx = current_page * items_per_page
    end_idx = min(start_idx + items_per_page, len(media))
    for idx in range(start_idx, end_idx):
        item = media[idx]
        if item['type'] == 'text':
            text = item['content']
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if isinstance(text, dict) and 'children' in text:
                text = ''.join(child['children'][0] for child in text['children'] if isinstance(child, dict) and 'children' in child)
            
            preview_text = (text[:12] + '...') if len(text) > 12 else text
        else:  # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç ‚Äî —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            preview_text = f"{image_counter} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"  # –ù—É–º–µ—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            image_counter += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
        keyboard.append([
            InlineKeyboardButton(text=str(preview_text), callback_data=f"preview_{idx}"),
            InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{idx}"),
            InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{idx}"),
        ])
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if current_page > 0:
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='page_down')])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    if current_page < total_pages - 1:
        keyboard.append([InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data='page_up')])
    
    keyboard.append([InlineKeyboardButton("üåå –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä üåå", callback_data='preview_article')])
    keyboard.append([InlineKeyboardButton("–ü–æ–º–æ—â—å –∏ —Ä–∞–∑–º–µ—Ç–∫–∞", callback_data='help_command')])
    keyboard.append([InlineKeyboardButton("–ù–∞–π—Ç–∏ –∞–≤—Ç–æ—Ä–∞, –∞–Ω–∏–º–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –ò–ò", callback_data='start_search')])
    keyboard.append([InlineKeyboardButton("üå† –ö –ó–∞–≤–µ—Ä—à–µ–Ω–∏—é –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ üå†", callback_data='create_article')])
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –∫–Ω–æ–ø–æ–∫
    reply_markup = InlineKeyboardMarkup(keyboard)
    sent_message = await context.bot.send_message(
        chat_id=update.message.chat_id,
        text='üìù –¢–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏3:',
        reply_markup=reply_markup
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
    user_data[user_id]['last_content_message_id'] = sent_message.message_id
    user_data[user_id]['current_page'] = current_page 

    del context.user_data['editing_index']

    return ASKING_FOR_IMAGE
        


@retry(wait=wait_fixed(2), stop=stop_after_attempt(3))
def make_request(url, data):
    response = requests.post(url, json=data, timeout=30)
    response.raise_for_status()
    return response.json()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
@retry(wait=wait_fixed(2), stop=stop_after_attempt(3))
async def send_media_with_retries(update, media_group, caption):
    try:
        await update.message.reply_text(caption, parse_mode='HTML')
        await update.message.reply_media_group(media=media_group)
    except Exception as e:
        logger.error(f"Failed to send media group: {e}")
        raise  # –ü–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫

async def send_media_group(update, media_group, caption):
    if not media_group:
        logger.error("Media group is empty")
        return
    try:
        await update.message.reply_text(caption, parse_mode='HTML')
        await update.message.reply_media_group(media=media_group)
    except Exception as e:
        logger.error(f"Failed to send media group: {e}")
        raise

async def send_media_group_with_retries(update, media_group, max_retries=3, delay=2):
    retries = 0
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–º
    if update.message:
        message_to_reply = update.message
    elif update.callback_query:
        message_to_reply = update.callback_query.message
    else:
        return False  # –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫

    while retries < max_retries:
        try:
            await message_to_reply.reply_media_group(media_group)
            return True  # –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        except Exception as e:
            logger.error(f"Failed to send media group: {e}")
            retries += 1
            if retries < max_retries:
                logger.info(f"Retrying in {delay} seconds... (Attempt {retries}/{max_retries})")
                await asyncio.sleep(delay)
    return False  # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å


# –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –∏ –∑–∞–¥–µ—Ä–∂–∫–æ–π
async def send_photo_with_retries(update, photo_url, caption, parse_mode, reply_markup=None, max_retries=3, delay=2):
    retries = 0
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–º
    if update.message:
        message_to_reply = update.message
    elif update.callback_query:
        message_to_reply = update.callback_query.message
    else:
        return False  # –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫

    while retries < max_retries:
        try:
            await message_to_reply.reply_photo(
                photo=photo_url,
                caption=caption,
                parse_mode=parse_mode,
                reply_markup=reply_markup  # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
            )
            return True  # –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        except Exception as e:
            logger.error(f"Failed to send photo: {e}")
            retries += 1
            if retries < max_retries:
                logger.info(f"Retrying in {delay} seconds... (Attempt {retries}/{max_retries})")
                await asyncio.sleep(delay)
    return False  # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å



async def delete_last(update: Update, context: CallbackContext) -> None:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à—ë–ª –∑–∞–ø—Ä–æ—Å - —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
    if update.message:  # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_id = update.message.from_user.id
        chat_id = update.message.chat_id
        message_id = update.message.message_id
    elif update.callback_query:  # –ï—Å–ª–∏ —ç—Ç–æ callback —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
        user_id = update.callback_query.from_user.id
        chat_id = update.callback_query.message.chat_id
        message_id = update.callback_query.message.message_id
    else:
        return  # –ï—Å–ª–∏ —ç—Ç–æ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, —Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    if user_id in user_data and 'media' in user_data[user_id]:
        if user_data[user_id]['media']:
            last_item = user_data[user_id]['media'].pop()  # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
            item_type = last_item['type']
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"–£–¥–∞–ª—ë–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç —Ç–∏–ø–∞: {item_type}\n\n–î–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /preview",
                reply_to_message_id=message_id
            )
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text="–í–∞—à–∞ —Å—Ç–∞—Ç—å—è –ø—É—Å—Ç–∞. –ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                reply_to_message_id=message_id
            )
    else:
        await context.bot.send_message(
            chat_id=chat_id,
            text="–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç–∞—Ç—å–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.",
            reply_to_message_id=message_id
        )



from telegram import InlineKeyboardButton, InlineKeyboardMarkup

async def preview_article(update: Update, context: CallbackContext) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑–≤–∞–Ω–æ –ª–∏ —á–µ—Ä–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É
    if update.message:
        user_id = update.message.from_user.id
    elif update.callback_query:
        user_id = update.callback_query.from_user.id
    else:
        return

    if user_id in user_data:
        try:
            author_name = "Anemone"
            author_link = "https://t.me/anemonn"
            artist_link = user_data[user_id].get('artist_link', '')
            media = user_data[user_id].get('media', [])
            title = user_data[user_id].get('title', '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—å–∏')

            # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            content = [{'tag': 'p', 'children': [{'tag': 'a', 'attrs': {'href': artist_link}, 'children': [artist_link]}]}]

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
            for index, item in enumerate(media):
                if item['type'] == 'text':
                    content.append({'tag': 'p', 'children': [item['content']]})
                elif item['type'] == 'image':
                    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –ø–æ–¥–ø–∏—Å—å—é
                    figure_content = [{'tag': 'img', 'attrs': {'src': item['url']}}]
                    if item.get('caption'):
                        figure_content.append({'tag': 'figcaption', 'children': [item['caption']]})

                    content.append({'tag': 'figure', 'children': figure_content})

                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è –ø–æ—Å–ª–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    if index < len(media) - 1:
                        content.append({'tag': 'hr'})

            # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –≤ Telegra.ph
            response = requests.post('https://api.telegra.ph/createPage', json={
                'access_token': TELEGRAPH_TOKEN,
                'title': title,
                'author_name': author_name,
                'author_url': author_link,
                'content': content
            })
            response.raise_for_status()
            response_json = response.json()

            if response_json.get('ok'):
                preview_url = f"https://telegra.ph/{response_json['result']['path']}"

                # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
                keyboard = [[InlineKeyboardButton("üå† –ö –ó–∞–≤–µ—Ä—à–µ–Ω–∏—é –ü—É–±–ª–∏–∫–∞—Ü–∏–∏ üå†", callback_data='create_article')]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if update.message:
                    await update.message.reply_text(f'–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—å–∏: {preview_url}', reply_markup=reply_markup)
                elif update.callback_query:
                    await update.callback_query.message.reply_text(f'–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç—å–∏: {preview_url}', reply_markup=reply_markup)
            else:
                if update.message:
                    await update.message.reply_text('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—å–∏.')
                elif update.callback_query:
                    await update.callback_query.message.reply_text('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—å–∏.')

        except requests.RequestException as e:
            if update.message:
                await update.message.reply_text(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}')
            elif update.callback_query:
                await update.callback_query.message.reply_text(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}')
    else:
        if update.message:
            await update.message.reply_text('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –ù–∞—á–Ω–∏—Ç–µ —Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.')
        elif update.callback_query:
            await update.callback_query.message.reply_text('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –ù–∞—á–Ω–∏—Ç–µ —Å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.')





async def handle_preview_button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ

    if query.data == 'preview_article':
        await preview_article(update, context)

async def handle_delete_button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ

    if query.data == 'delete_last':
        await delete_last(update, context)


async def handle_help_text_button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ

    if query.data == 'help_command':
        await help_command(update, context)


async def handle_create_article_button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()  # –û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é publish, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–∑–¥–∞—ë—Ç —Å—Ç–∞—Ç—å—é
    await publish(update, context)


async def handle_restart_button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ

    if query.data == 'restart':
        await restart(update, context)

async def handle_edit_button(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ

    if query.data == 'edit_article':
        await edit_article(update, context)   

# –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
async def handle_page_change(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    
    if query.data == 'page_down':
        user_data[user_id]['current_page'] -= 1
    elif query.data == 'page_up':
        user_data[user_id]['current_page'] += 1

    await edit_article(update, context)  # –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
def count_images_in_content(content):
    image_count = 0
    for item in content:
        if isinstance(item, dict):
            if item.get('tag') == 'img':
                image_count += 1
            elif item.get('tag') == 'figure' and 'children' in item:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–≥ figure, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                image_count += count_images_in_content(item['children'])
    return image_count

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
async def publish(update: Update, context: CallbackContext) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–ª–æ –ª–∏ —Å–æ–±—ã—Ç–∏–µ –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ—Ç callback_query
    if update.message:
        user_id = update.message.from_user.id
        message_to_reply = update.message
    elif update.callback_query:
        user_id = update.callback_query.from_user.id
        message_to_reply = update.callback_query.message
    else:
        return  # –ï—Å–ª–∏ –Ω–∏ —Ç–æ–≥–æ, –Ω–∏ –¥—Ä—É–≥–æ–≥–æ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –≤—ã–π–¥–µ–º

    if user_id in user_data:
        try:
            author_name = "Anemone"
            author_link = "https://t.me/anemonn"
            artist_link = user_data[user_id]['artist_link']
            media = user_data[user_id].get('media', [])
            title = user_data[user_id].get('title', 'test')

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ—Ä–∞–∑—É –ø–µ—Ä–µ–¥ "–ê–≤—Ç–æ—Ä", –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            extra_phrase = user_data[user_id].get('extra_phrase', "")
            author_name_final = user_data[user_id].get('author_name', '')

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ñ—Ä–∞–∑–æ–π –ø–µ—Ä–µ–¥ "–ê–≤—Ç–æ—Ä", –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if extra_phrase:
                author_line = f"{extra_phrase}\n–ê–≤—Ç–æ—Ä: {author_name_final}"
            else:
                author_line = f"–ê–≤—Ç–æ—Ä: {author_name_final}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–≤—Ç–æ—Ä—Å–∫–æ–µ –∏–º—è
            if not author_name_final:
                author_line = title  # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ "^...^", —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            else:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ñ—Ä–∞–∑–æ–π –ø–µ—Ä–µ–¥ "–ê–≤—Ç–æ—Ä", –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                if extra_phrase:
                    author_line = f"{extra_phrase}\n–ê–≤—Ç–æ—Ä: {author_name_final}"
                else:
                    author_line = f"–ê–≤—Ç–æ—Ä: {author_name_final}"


            # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –≤ Telegra.ph
            content = [
                {
                    'tag': 'p',
                    'children': [
                        {
                            'tag': 'a',
                            'attrs': {'href': artist_link},
                            'children': [artist_link]
                        }
                    ]
                }
            ]

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
            for index, item in enumerate(media):
                if item['type'] == 'text':
                    content.append({'tag': 'p', 'children': [item['content']]})
                elif item['type'] == 'image':
                    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –ø–æ–¥–ø–∏—Å—å—é
                    figure_content = [
                        {'tag': 'img', 'attrs': {'src': item['url']}},
                    ]
                    if item.get('caption'):
                        figure_content.append({'tag': 'figcaption', 'children': [item['caption']]})

                    content.append({'tag': 'figure', 'children': figure_content})

                    if index < len(media) - 1:
                        content.append({'tag': 'hr'})

            content.append({'tag': 'hr'})
            content.append({
                'tag': 'i',
                'children': [f'–û—Ä–∏–≥–∏–Ω–∞–ª—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é (‚ãÆ)']
            })

            response = requests.post('https://api.telegra.ph/createPage', json={
                'access_token': TELEGRAPH_TOKEN,
                'title': title,
                'author_name': author_name,
                'author_url': author_link,
                'content': content
            })
            response.raise_for_status()
            response_json = response.json()

            if response_json.get('ok'):
                article_url = f"https://telegra.ph/{response_json['result']['path']}"

                article_response = requests.get(f'https://api.telegra.ph/getPage?access_token={TELEGRAPH_TOKEN}&path={response_json["result"]["path"]}&return_content=true')
                article_response.raise_for_status()
                article_data = article_response.json()

                image_count = count_images_in_content(content)
                logger.info(f"Number of images detected: {image_count}")

                if image_count > 1:
                    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–º–µ—à–∏–≤–∞–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º
                    image_media = [item for item in media if item['type'] == 'image']
                    
                    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 10
                    media_groups = [image_media[i:i + 10] for i in range(0, len(image_media), 10)]
                    media_group_data = []
                    
                    # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–º, –±—ã–ª –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç
                    text_added = False

                    for group in media_groups:
                        media_group = []

                        for idx, item in enumerate(group):
                            caption = None
                            
                            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∫ –ø–µ—Ä–≤–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
                            if not text_added:
                                caption = f'{author_line}\n<a href="{article_url}">–û—Ä–∏–≥–∏–Ω–∞–ª</a>'
                                text_added = True

                            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
                            media_group.append(InputMediaPhoto(media=item['url'], caption=caption, parse_mode='HTML' if caption else None))
                            
                            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
                            media_group_data.append({
                                "file_id": item['url'],
                                "caption": caption,
                                "parse_mode": 'HTML' if caption else None
                            })

                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
                        success = await send_media_group_with_retries(update, media_group)
                        if not success:
                            await message_to_reply.reply_text(f'üö´–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã.')
                            return

                        if caption:
                            await message_to_reply.reply_text(
                                f"‚úÖ –ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å –ø–æ–¥–ø–∏—Å—å—é.",
                                disable_web_page_preview=True
                            )

                    media_group_storage[user_id] = media_group_data



                if image_count == 1:
                    single_image = next((item for item in media if item['type'] == 'image'), None)
                    if single_image:
                        caption = f'{author_line}\n<a href="{article_url}">–û—Ä–∏–≥–∏–Ω–∞–ª</a>'
                        
                        media_group_storage[user_id] = [{
                            "file_id": single_image['url'],
                            "caption": caption,
                            "parse_mode": 'HTML'
                        }]
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –≤—ã–∑–æ–≤ - –∏–∑ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
                        success = await send_photo_with_retries(
                            update=update,
                            photo_url=single_image['url'],
                            caption=caption,
                            parse_mode='HTML'
                        )
                        if not success:
                            await message_to_reply.reply_text('üö´–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. /restart')
                            return

                elif image_count == 0:
                    message_with_link = f'{author_line}\n<a href="{article_url}">–û—Ä–∏–≥–∏–Ω–∞–ª</a>'
                    await message_to_reply.reply_text(message_with_link, parse_mode='HTML')

                image_text = (
                    "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" if image_count % 10 == 1 and image_count % 100 != 11
                    else "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" if 2 <= image_count % 10 <= 4 and (image_count % 100 < 10 or image_count % 100 >= 20)
                    else "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"
                )

                await message_to_reply.reply_text(
                    f'====--- –í —Å—Ç–∞—Ç—å–µ {image_count} {image_text} ---===='
                )

                publish_data[user_id] = {
                    'title': title,
                    'article_url': article_url,
                    'image_count': image_count,
                    'author_line': author_line
                }

                del user_data[user_id]
                await message_to_reply.reply_text(
                    '‚úÖ–í—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã.\n'
                    '–ù–æ —Å–µ–π—á–∞—Å –æ–Ω–∏ –≤–∏–¥–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞–º, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∏–º–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /share '
                    '(—ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ –≤–∞—à–µ–≥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –∫–æ–º–∞–Ω–¥—ã publish).\n\n'
                    '–õ–∏–±–æ —Å–æ–∑–¥–∞–π—Ç–µ –¥—Ä—É–≥—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n\n'
                    '<i>–í—ã —Ç–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /send, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –ø—Ä—è–º–æ–π —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π. '
                    '–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ª—é–±—ã–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –±–æ—Ç—É, –±—É–¥—É—Ç —Å—Ä–∞–∑—É –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. '
                    '–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è –∫–∞—Å–∞—Ç–µ–ª—å–Ω–æ –≤–∞—à–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏, '
                    '—Å–æ–æ–±—â–∏—Ç—å –æ–± –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –±–∞–≥–∞—Ö –∏–ª–∏ —á—Ç–æ-—Ç–æ –µ—â—ë.</i>\n\n'
                    '‚úÖ*–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ.*\n\n'
                    '(=^„Éª„Çß„Éª^=)',
                    parse_mode='HTML',  # –î–æ–±–∞–≤–ª—è–µ–º parse_mode
                    reply_markup=ReplyKeyboardRemove()
                )
                logger.info(f"User {user_id}'s data cleared and process completed.")
                await message_to_reply.reply_text('********************************************************')
                # –í—ã–∑–æ–≤ –∫–æ–º–∞–Ω–¥—ã restart
                await restart(update, context)

                return ConversationHandler.END
            else:
                await message_to_reply.reply_text('üö´–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏. /restart')
        except requests.RequestException as e:
            logger.error(f"Request error: {e}")
            await message_to_reply.reply_text('üö´–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏. /restart')
        except Exception as e:
            logger.error(f"Unexpected error: {e}")
            await message_to_reply.reply_text('üö´–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. /restart')


import ast



async def unknown_message(update: Update, context: CallbackContext) -> None:
    user_id = update.message.from_user.id
    if user_id not in user_data:
        await update.message.reply_text('üö´–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≤—Ç–æ—Ä–∞, –∏–º—è –∞–≤—Ç–æ—Ä–∞ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –Ω–∞–∂–º–∏—Ç–µ /restart')
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
        if user_data[user_id]['status'] == 'awaiting_artist_link':
            await handle_artist_link(update, context)
        elif user_data[user_id]['status'] == 'awaiting_author_name':
            await handle_author_name(update, context)
        elif user_data[user_id]['status'] == 'awaiting_image':
            await handle_image(update, context)
            
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 10
def chunk_images(images, chunk_size=10):
    for i in range(0, len(images), chunk_size):
        yield images[i:i + chunk_size]

TELEGRAM_API_TIMEOUT = 20  # –£–≤–µ–ª–∏—á—å—Ç–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è        

async def share(update: Update, context: CallbackContext) -> None:
    global publish_data
    user_id = update.message.from_user.id
    if user_id in publish_data:
        data = publish_data[user_id]
        title = data['title']
        article_url = data['article_url']
        author_line = data['author_line']

        try:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Telegra.ph
            article_response = requests.get(f'https://api.telegra.ph/getPage?path={article_url.split("/")[-1]}&return_content=true', timeout=10)
            article_response.raise_for_status()
            article_data = article_response.json()

            # –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–Ω—Ç–µ, –≤–∫–ª—é—á–∞—è —Ç–µ–≥–∏ figure
            images = []
            for node in article_data['result']['content']:
                if node.get('tag') == 'img' and 'attrs' in node and 'src' in node['attrs']:
                    images.append(node['attrs']['src'])
                elif node.get('tag') == 'figure' and 'children' in node:
                    images_in_figure = count_images_in_content(node['children'])
                    images.extend([img['attrs']['src'] for img in node['children'] if img.get('tag') == 'img' and 'attrs' in img and 'src' in img['attrs']])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
            message_with_link = f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.username} –ø—Ä–µ–¥–ª–æ–∂–∏–ª:\n {author_line}\n<a href="{article_url}">–û—Ä–∏–≥–∏–Ω–∞–ª</a>'
            await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=message_with_link, parse_mode='HTML', disable_web_page_preview=True)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ 10
            if images:
                for image_group in chunk_images(images):
                    media_group = [InputMediaPhoto(image) for image in image_group]
                    await context.bot.send_media_group(chat_id=GROUP_CHAT_ID, media=media_group)
                    await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 1 —Å–µ–∫—É–Ω–¥—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø
            else:
                await context.bot.send_message(chat_id=GROUP_CHAT_ID, text='–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Å—Ç–∞—Ç—å–µ –Ω–µ—Ç.')

            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
            await update.message.reply_text('‚úÖ–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –°–ø–∞—Å–∏–±–æ.')

        except Timeout:
            logger.warning("Request to Telegram timed out, but message sent successfully.")
            await update.message.reply_text('‚úÖ–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—å–∏ –∑–∞–Ω—è–ª–∞ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏. –í–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ –æ–±—ä—ë–º–∞ —Å—Ç–∞—Ç—å–∏, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /send –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ç–∞–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É —Å—Ç–∞—Ç—å—é /restart –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞')
        except Exception as e:
            logger.error(f"Failed to process article: {e}")
            await update.message.reply_text('‚úÖ–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—å–∏ –∑–∞–Ω—è–ª–∞ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏. –í–µ—Ä–æ—è—Ç–Ω–æ —ç—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ –∏–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ –æ–±—ä—ë–º–∞ —Å—Ç–∞—Ç—å–∏, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /send –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ç–∞–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à—É —Å—Ç–∞—Ç—å—é /restart –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞')
    else:
        await update.message.reply_text('üö´–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.')

async def send_mode(update: Update, context: CallbackContext) -> None:
    """–í–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user_id = update.message.from_user.id
    users_in_send_mode.add(user_id)
    await update.message.reply_text('üîÑ –†–µ–∂–∏–º –ø—Ä—è–º–æ–π —Å–≤—è–∑–∏ –≤–∫–ª—é—á–µ–Ω. –í—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –≤–≤–µ–¥–∏—Ç–µ /fin')
    
async def fin_mode(update: Update, context: CallbackContext) -> None:
    """–í—ã–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≤–æ–∑–≤—Ä–∞—Ç –∫ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–µ."""
    user_id = update.message.from_user.id
    if user_id in users_in_send_mode:
        users_in_send_mode.remove(user_id)
        await update.message.reply_text('‚úÖ –†–µ–∂–∏–º –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω. –ë–æ—Ç –≤–µ—Ä–Ω—É–ª—Å—è –∫ —Å–≤–æ–µ–º—É –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ä–µ–∂–∏–º—É —Ä–∞–±–æ—Ç—ã.')
    else:
        await update.message.reply_text('‚ùó –í—ã –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Ä–µ–∂–∏–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è.')

from telegram import InputMediaPhoto, InputMediaVideo, InputMediaDocument

async def duplicate_message(update: Update, context: CallbackContext) -> None:
    """–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É, –≤–∫–ª—é—á–∞—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã, –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã."""
    user = update.message.from_user
    user_name = user.username if user.username else user.full_name
    message_prefix = f"{user_name} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:"

    if user.id in users_in_send_mode:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã
        if update.message.media_group_id:
            media_group = []
            messages = await context.bot.get_updates(offset=update.update_id - 10)  # –ü–æ–ª—É—á–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–±–æ—Ä–∫–∏ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–µ–º –∂–µ media_group_id
            for message in messages:
                if message.message.media_group_id == update.message.media_group_id:
                    if message.message.photo:
                        media_group.append(InputMediaPhoto(message.message.photo[-1].file_id, caption=message.message.caption if message.message.caption else ""))
                    elif message.message.video:
                        media_group.append(InputMediaVideo(message.message.video.file_id, caption=message.message.caption if message.message.caption else ""))
                    elif message.message.document:
                        media_group.append(InputMediaDocument(message.message.document.file_id, caption=message.message.caption if message.message.caption else ""))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            if media_group:
                await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=message_prefix)
                await context.bot.send_media_group(chat_id=GROUP_CHAT_ID, media=media_group)
                await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /fin")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        elif update.message.text:
            await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=f"{message_prefix}\n{update.message.text}")
            await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /fin")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ñ–æ—Ç–æ
        elif update.message.photo:
            photo = update.message.photo[-1].file_id  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
            await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=message_prefix)
            await context.bot.send_photo(chat_id=GROUP_CHAT_ID, photo=photo, caption=update.message.caption)
            await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /fin")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–∫ —Ñ–∞–π–ª)
        elif update.message.document:
            doc = update.message.document.file_id
            await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=message_prefix)
            await context.bot.send_document(chat_id=GROUP_CHAT_ID, document=doc, caption=update.message.caption)
            await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /fin")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –≤–∏–¥–µ–æ
        elif update.message.video:
            video = update.message.video.file_id
            await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=message_prefix)
            await context.bot.send_video(chat_id=GROUP_CHAT_ID, video=video, caption=update.message.caption)
            await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /fin")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤
        elif update.message.sticker:
            await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=message_prefix)
            await context.bot.send_sticker(chat_id=GROUP_CHAT_ID, sticker=update.message.sticker.file_id)
            await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /fin")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
        elif update.message.audio:
            await context.bot.send_message(chat_id=GROUP_CHAT_ID, text=message_prefix)
            await context.bot.send_audio(chat_id=GROUP_CHAT_ID, audio=update.message.audio.file_id, caption=update.message.caption)
            await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ /fin")

        # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –º–µ—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
        await start(update, context)




def main() -> None:
    load_context_from_firebase()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–æ–≤ –≤ user_contexts
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏
    conversation_handler = ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            CommandHandler('edit', edit_article),            
            MessageHandler(filters.TEXT & ~filters.COMMAND, main_logic)  # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
        ],
        states={
            ASKING_FOR_ARTIST_LINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_artist_link)],
            ASKING_FOR_AUTHOR_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_author_name)],
            EDITING_FRAGMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_new_text)],
            ASKING_FOR_IMAGE: [
                MessageHandler(filters.PHOTO | filters.Document.ALL, handle_new_image),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text)
            ],
        },
        fallbacks=[MessageHandler(filters.TEXT & ~filters.COMMAND, unknown_message)],
        per_user=True
    )

    search_handler = ConversationHandler(
        entry_points=[CommandHandler('search', start_search)],
        states={
            ASKING_FOR_FILE: [
                MessageHandler(filters.PHOTO | filters.Document.ALL, handle_file),
                MessageHandler(filters.ALL & ~filters.COMMAND, unknown_search_message),
            ],
        },
        fallbacks=[
            CommandHandler('fin_search', finish_search),
            CommandHandler('restart', restart),  # –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /restart
        ],
        per_user=True,
        allow_reentry=True
    )

    ocr_handler = ConversationHandler(
        entry_points=[CommandHandler('ocr', start_ocr), CallbackQueryHandler(text_rec_with_gpt, pattern='^text_rec$')],
        states={
            ASKING_FOR_FILE: [
                MessageHandler(filters.PHOTO | filters.Document.ALL, handle_file),
                MessageHandler(filters.ALL & ~filters.COMMAND, unknown_ocr_message),
            ],
            ASKING_FOR_FOLLOWUP: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_followup_question),            ],        
        },
        fallbacks=[
            CommandHandler('fin_ocr', finish_ocr),
            CommandHandler('restart', restart),  # –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /restart
        ],
        per_user=True,
        allow_reentry=True
    )

    gpt_handler = ConversationHandler(
        entry_points=[CommandHandler('gpt', run_gpt), CommandHandler('set_role', handle_set_role_button), CommandHandler('help_gpt', handle_gpt_help), CommandHandler('short_help_gpt', handle_short_gpt_help)],
        states={
            ASKING_FOR_ROLE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_role_input),
            ],
            ASKING_FOR_FILE: [
                MessageHandler(filters.PHOTO | filters.Document.ALL, handle_file),
                MessageHandler(filters.ALL & ~filters.COMMAND, unknown_ocr_message),
            ],
        },
        fallbacks=[
            CommandHandler('fin_gpt', stop_gpt),
            CommandHandler('restart', restart),  # –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /restart
        ],
        per_user=True,
        allow_reentry=True
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CallbackQueryHandler(handle_edit_button, pattern='edit_article'))
    application.add_handler(CallbackQueryHandler(handle_delete_button, pattern='delete_last'))
    application.add_handler(CallbackQueryHandler(handle_edit_delete, pattern='^edit_|^delete_'))
    application.add_handler(CallbackQueryHandler(handle_preview_button, pattern='preview_article'))
    application.add_handler(CallbackQueryHandler(handle_create_article_button, pattern='create_article'))
    application.add_handler(CallbackQueryHandler(handle_help_text_button, pattern='help_command'))
    application.add_handler(CallbackQueryHandler(handle_restart_button, pattern='restart'))
    application.add_handler(CallbackQueryHandler(handle_page_change, pattern='^page_')) 
    application.add_handler(CallbackQueryHandler(ai_or_not, pattern='ai_or_not'))
    application.add_handler(CallbackQueryHandler(finish_search, pattern='finish_search')) 
    application.add_handler(CallbackQueryHandler(finish_ocr, pattern='finish_ocr'))
    application.add_handler(CallbackQueryHandler(stop_gpt, pattern='stop_gpt'))      
    application.add_handler(CallbackQueryHandler(start_search, pattern='start_search'))
    application.add_handler(CallbackQueryHandler(start_ocr, pattern='start_ocr'))
    application.add_handler(CallbackQueryHandler(button_ocr, pattern='recognize_text'))
    application.add_handler(CallbackQueryHandler(button_ocr, pattern='recognize_plant'))
    application.add_handler(CallbackQueryHandler(button_more_plants_handler, pattern='plant_\\d+'))
    application.add_handler(CallbackQueryHandler(gpt_plants_help_handler, pattern='^gpt_plants_help$'))
    application.add_handler(CallbackQueryHandler(gpt_plants_more_handler, pattern='^gpt_plants_more$'))
    application.add_handler(CallbackQueryHandler(text_rec_with_gpt, pattern='text_rec_with_gpt$'))
    application.add_handler(CallbackQueryHandler(text_plant_help_with_gpt, pattern='text_plant_help_with_gpt$'))    
    application.add_handler(CallbackQueryHandler(handle_check_text, pattern='^check_text$'))
    application.add_handler(CallbackQueryHandler(run_gpt, pattern='run_gpt')) 
    application.add_handler(CallbackQueryHandler(reset_dialog, pattern='^reset_dialog$')) 
    application.add_handler(CallbackQueryHandler(handle_set_role_button, pattern='^set_role_button$'))  
    application.add_handler(CallbackQueryHandler(handle_followup_question, pattern='^ask_followup'))    
    application.add_handler(CallbackQueryHandler(handle_gpt_help, pattern='^help_gpt$'))
    application.add_handler(CallbackQueryHandler(handle_short_gpt_help, pattern='^short_help_gpt$'))    
    application.add_handler(CallbackQueryHandler(handle_choose_preset, pattern="choose_preset"))
    application.add_handler(CallbackQueryHandler(handle_preset_selection, pattern="set_preset:.*"))
    application.add_handler(CallbackQueryHandler(handle_choose_model, pattern="^choose_model$"))
    application.add_handler(CallbackQueryHandler(handle_model_selection, pattern="^set_model:"))
    
    
    application.add_handler(CommandHandler('set_role', set_role ))          
    application.add_handler(CommandHandler('send', send_mode))
    application.add_handler(CommandHandler('fin', fin_mode))
    application.add_handler(CommandHandler('restart', restart))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(CommandHandler('publish', publish))
    application.add_handler(CommandHandler('preview', preview_article))  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /preview
    application.add_handler(CommandHandler('delete', delete_last))
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, duplicate_message))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler('share', share))  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /share

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ /search –∏ /fin_search
    application.add_handler(search_handler)
    application.add_handler(CommandHandler('fin_search', finish_search))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /fin_search

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ /ocr –∏ /fin_ocr
    application.add_handler(ocr_handler)
    application.add_handler(CommandHandler('fin_ocr', finish_ocr)) 

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ /gpt –∏ /fin_gpt
    application.add_handler(gpt_handler)
    application.add_handler(CommandHandler('fin_gpt', stop_gpt))     

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π conversation_handler
    application.add_handler(conversation_handler)

    logger.info("Bot started and polling...")  
    keep_alive()#–∑–∞–ø—É—Å–∫–∞–µ–º flask-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ. –ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∏–∂–µ...
    application.run_polling() #–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞    

if __name__ == '__main__':
    main()
